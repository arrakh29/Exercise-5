
Exercise_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004164  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004304  08004304  00005304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  080043c0  080043c0  000053c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c8  080043c8  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000053c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043cc  080043cc  000053cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080043d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004980  20000014  080043e4  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004994  080043e4  00006994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d314  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002472  00000000  00000000  00013358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000157d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000926  00000000  00000000  000163f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025f1  00000000  00000000  00016d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d19c  00000000  00000000  0001930f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d04c  00000000  00000000  000264ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b34f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003138  00000000  00000000  000b353c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b6674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042ec 	.word	0x080042ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080042ec 	.word	0x080042ec

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	StartFlag = 1;
 80004d4:	4b13      	ldr	r3, [pc, #76]	@ (8000524 <main+0x54>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 f9d9 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f835 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f89b 	bl	800061c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e6:	f001 f945 	bl	8001774 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000528 <main+0x58>)
 80004ec:	2100      	movs	r1, #0
 80004ee:	480f      	ldr	r0, [pc, #60]	@ (800052c <main+0x5c>)
 80004f0:	f001 f98a 	bl	8001808 <osThreadNew>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <main+0x60>)
 80004f8:	6013      	str	r3, [r2, #0]

  /* creation of GREENLEDTASK */
  GREENLEDTASKHandle = osThreadNew(GREENLED, NULL, &GREENLEDTASK_attributes);
 80004fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <main+0x64>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	480e      	ldr	r0, [pc, #56]	@ (8000538 <main+0x68>)
 8000500:	f001 f982 	bl	8001808 <osThreadNew>
 8000504:	4603      	mov	r3, r0
 8000506:	4a0d      	ldr	r2, [pc, #52]	@ (800053c <main+0x6c>)
 8000508:	6013      	str	r3, [r2, #0]

  /* creation of REDLEDTASK */
  REDLEDTASKHandle = osThreadNew(REDLED, NULL, &REDLEDTASK_attributes);
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <main+0x70>)
 800050c:	2100      	movs	r1, #0
 800050e:	480d      	ldr	r0, [pc, #52]	@ (8000544 <main+0x74>)
 8000510:	f001 f97a 	bl	8001808 <osThreadNew>
 8000514:	4603      	mov	r3, r0
 8000516:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <main+0x78>)
 8000518:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800051a:	f001 f94f 	bl	80017bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051e:	bf00      	nop
 8000520:	e7fd      	b.n	800051e <main+0x4e>
 8000522:	bf00      	nop
 8000524:	2000003c 	.word	0x2000003c
 8000528:	08004344 	.word	0x08004344
 800052c:	080006cd 	.word	0x080006cd
 8000530:	20000030 	.word	0x20000030
 8000534:	08004368 	.word	0x08004368
 8000538:	080006dd 	.word	0x080006dd
 800053c:	20000034 	.word	0x20000034
 8000540:	0800438c 	.word	0x0800438c
 8000544:	08000721 	.word	0x08000721
 8000548:	20000038 	.word	0x20000038

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fe8c 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b27      	ldr	r3, [pc, #156]	@ (8000614 <SystemClock_Config+0xc8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a26      	ldr	r2, [pc, #152]	@ (8000614 <SystemClock_Config+0xc8>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b24      	ldr	r3, [pc, #144]	@ (8000614 <SystemClock_Config+0xc8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <SystemClock_Config+0xcc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a20      	ldr	r2, [pc, #128]	@ (8000618 <SystemClock_Config+0xcc>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <SystemClock_Config+0xcc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c0:	2348      	movs	r3, #72	@ 0x48
 80005c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fc77 	bl	8000ec4 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005dc:	f000 f8c2 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2102      	movs	r1, #2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fed9 	bl	80013b4 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000608:	f000 f8ac 	bl	8000764 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	@ 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_GPIO_Init+0x60>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000638:	4a10      	ldr	r2, [pc, #64]	@ (800067c <MX_GPIO_Init+0x60>)
 800063a:	f043 0302 	orr.w	r3, r3, #2
 800063e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_GPIO_Init+0x60>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000644:	f003 0302 	and.w	r3, r3, #2
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_Pin|YELLOW_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000652:	480b      	ldr	r0, [pc, #44]	@ (8000680 <MX_GPIO_Init+0x64>)
 8000654:	f000 fc1c 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_Pin YELLOW_Pin GREEN_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = RED_Pin|YELLOW_Pin|GREEN_Pin|BLUE_Pin;
 8000658:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800065c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_GPIO_Init+0x64>)
 8000670:	f000 fa8a 	bl	8000b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400

08000684 <AccessSharedData>:

/* USER CODE BEGIN 4 */
void AccessSharedData(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    if (StartFlag == 1) {
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <AccessSharedData+0x40>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d103      	bne.n	8000698 <AccessSharedData+0x14>
        // Set Start flag to Down to indicate resource is in use
        StartFlag = 0;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <AccessSharedData+0x40>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e005      	b.n	80006a4 <AccessSharedData+0x20>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, HIGH);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800069e:	480a      	ldr	r0, [pc, #40]	@ (80006c8 <AccessSharedData+0x44>)
 80006a0:	f000 fbf6 	bl	8000e90 <HAL_GPIO_WritePin>
    }

    // Simulate read/write operations with a delay of 500 milliseconds
    HAL_Delay(500);
 80006a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006a8:	f000 f964 	bl	8000974 <HAL_Delay>

    // Set Start flag back to Up to indicate resource is free
    StartFlag = 1;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <AccessSharedData+0x40>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]

    // Turn off Blue LED (if it was turned on during contention)
    HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, LOW);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <AccessSharedData+0x44>)
 80006ba:	f000 fbe9 	bl	8000e90 <HAL_GPIO_WritePin>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000003c 	.word	0x2000003c
 80006c8:	40020400 	.word	0x40020400

080006cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 f929 	bl	800192c <osDelay>
 80006da:	e7fb      	b.n	80006d4 <StartDefaultTask+0x8>

080006dc <GREENLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GREENLED */
void GREENLED(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GREENLED */
  /* Infinite loop */
  for(;;)
  {
	  GreenFlag = 1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <GREENLED+0x3c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
	  	// Turn on Green LED
	  	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, HIGH);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f0:	480a      	ldr	r0, [pc, #40]	@ (800071c <GREENLED+0x40>)
 80006f2:	f000 fbcd 	bl	8000e90 <HAL_GPIO_WritePin>

	  	// Access shared data
	  	AccessSharedData();
 80006f6:	f7ff ffc5 	bl	8000684 <AccessSharedData>

	  	// Turn off Green LED
	  	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, LOW);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000700:	4806      	ldr	r0, [pc, #24]	@ (800071c <GREENLED+0x40>)
 8000702:	f000 fbc5 	bl	8000e90 <HAL_GPIO_WritePin>

	  	GreenFlag = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <GREENLED+0x3c>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
	  	// Delay for 500 milliseconds
	  	osDelay(500);
 800070c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000710:	f001 f90c 	bl	800192c <osDelay>
	  GreenFlag = 1;
 8000714:	bf00      	nop
 8000716:	e7e5      	b.n	80006e4 <GREENLED+0x8>
 8000718:	20000001 	.word	0x20000001
 800071c:	40020400 	.word	0x40020400

08000720 <REDLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_REDLED */
void REDLED(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN REDLED */
  /* Infinite loop */
  for(;;)
  {
	  RedFlag = 1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <REDLED+0x3c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
	  	// Turn on Red LED
	  	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, HIGH);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000734:	480a      	ldr	r0, [pc, #40]	@ (8000760 <REDLED+0x40>)
 8000736:	f000 fbab 	bl	8000e90 <HAL_GPIO_WritePin>

	  	// Access shared data
	  	AccessSharedData();
 800073a:	f7ff ffa3 	bl	8000684 <AccessSharedData>

	  	// Turn off Red LED
	  	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, LOW);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000744:	4806      	ldr	r0, [pc, #24]	@ (8000760 <REDLED+0x40>)
 8000746:	f000 fba3 	bl	8000e90 <HAL_GPIO_WritePin>

	  	RedFlag = 0;
 800074a:	4b04      	ldr	r3, [pc, #16]	@ (800075c <REDLED+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
	  	// Delay for 100 milliseconds
	  	osDelay(100);
 8000750:	2064      	movs	r0, #100	@ 0x64
 8000752:	f001 f8eb 	bl	800192c <osDelay>
	  RedFlag = 1;
 8000756:	bf00      	nop
 8000758:	e7e6      	b.n	8000728 <REDLED+0x8>
 800075a:	bf00      	nop
 800075c:	20000000 	.word	0x20000000
 8000760:	40020400 	.word	0x40020400

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_MspInit+0x54>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	4a11      	ldr	r2, [pc, #68]	@ (80007c4 <HAL_MspInit+0x54>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000784:	6453      	str	r3, [r2, #68]	@ 0x44
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <HAL_MspInit+0x54>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <HAL_MspInit+0x54>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	210f      	movs	r1, #15
 80007b2:	f06f 0001 	mvn.w	r0, #1
 80007b6:	f000 f9be 	bl	8000b36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <NMI_Handler+0x4>

080007d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <MemManage_Handler+0x4>

080007e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <UsageFault_Handler+0x4>

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000802:	f000 f897 	bl	8000934 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000806:	f002 fcb9 	bl	800317c <xTaskGetSchedulerState>
 800080a:	4603      	mov	r3, r0
 800080c:	2b01      	cmp	r3, #1
 800080e:	d001      	beq.n	8000814 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000810:	f003 fab2 	bl	8003d78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000874 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000840:	f7ff ffea 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	@ (800087c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	@ (8000888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f003 fd0d 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f7ff fe2f 	bl	80004d0 <main>
  bx  lr    
 8000872:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000880:	080043d0 	.word	0x080043d0
  ldr r2, =_sbss
 8000884:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000888:	20004994 	.word	0x20004994

0800088c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <HAL_Init+0x40>)
 800089a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800089e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <HAL_Init+0x40>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <HAL_Init+0x40>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f931 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff ff54 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f93b 	bl	8000b6e <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f911 	bl	8000b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	@ (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000004 	.word	0x20000004
 800092c:	2000000c 	.word	0x2000000c
 8000930:	20000008 	.word	0x20000008

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2000000c 	.word	0x2000000c
 8000958:	20000040 	.word	0x20000040

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000040 	.word	0x20000040

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000000c 	.word	0x2000000c

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	@ (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	@ (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	@ 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	@ 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff47 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff5c 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffb0 	bl	8000adc <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	e159      	b.n	8000e58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 8148 	bne.w	8000e52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d005      	beq.n	8000bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d130      	bne.n	8000c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0201 	and.w	r2, r3, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d017      	beq.n	8000c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d123      	bne.n	8000ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	69b9      	ldr	r1, [r7, #24]
 8000cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0203 	and.w	r2, r3, #3
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 80a2 	beq.w	8000e52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b57      	ldr	r3, [pc, #348]	@ (8000e70 <HAL_GPIO_Init+0x2e8>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a56      	ldr	r2, [pc, #344]	@ (8000e70 <HAL_GPIO_Init+0x2e8>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b54      	ldr	r3, [pc, #336]	@ (8000e70 <HAL_GPIO_Init+0x2e8>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2a:	4a52      	ldr	r2, [pc, #328]	@ (8000e74 <HAL_GPIO_Init+0x2ec>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a49      	ldr	r2, [pc, #292]	@ (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d019      	beq.n	8000d8a <HAL_GPIO_Init+0x202>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a48      	ldr	r2, [pc, #288]	@ (8000e7c <HAL_GPIO_Init+0x2f4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d013      	beq.n	8000d86 <HAL_GPIO_Init+0x1fe>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a47      	ldr	r2, [pc, #284]	@ (8000e80 <HAL_GPIO_Init+0x2f8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d00d      	beq.n	8000d82 <HAL_GPIO_Init+0x1fa>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a46      	ldr	r2, [pc, #280]	@ (8000e84 <HAL_GPIO_Init+0x2fc>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x1f6>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a45      	ldr	r2, [pc, #276]	@ (8000e88 <HAL_GPIO_Init+0x300>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_GPIO_Init+0x1f2>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e008      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e004      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	f002 0203 	and.w	r2, r2, #3
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	4093      	lsls	r3, r2
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d9c:	4935      	ldr	r1, [pc, #212]	@ (8000e74 <HAL_GPIO_Init+0x2ec>)
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000daa:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dce:	4a2f      	ldr	r2, [pc, #188]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df8:	4a24      	ldr	r2, [pc, #144]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e22:	4a1a      	ldr	r2, [pc, #104]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3301      	adds	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	2b0f      	cmp	r3, #15
 8000e5c:	f67f aea2 	bls.w	8000ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3724      	adds	r7, #36	@ 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40013800 	.word	0x40013800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40013c00 	.word	0x40013c00

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e267      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d075      	beq.n	8000fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ee2:	4b88      	ldr	r3, [pc, #544]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d00c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eee:	4b85      	ldr	r3, [pc, #532]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d112      	bne.n	8000f20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000efa:	4b82      	ldr	r3, [pc, #520]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f06:	d10b      	bne.n	8000f20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	4b7e      	ldr	r3, [pc, #504]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d05b      	beq.n	8000fcc <HAL_RCC_OscConfig+0x108>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d157      	bne.n	8000fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e242      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f28:	d106      	bne.n	8000f38 <HAL_RCC_OscConfig+0x74>
 8000f2a:	4b76      	ldr	r3, [pc, #472]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a75      	ldr	r2, [pc, #468]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e01d      	b.n	8000f74 <HAL_RCC_OscConfig+0xb0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x98>
 8000f42:	4b70      	ldr	r3, [pc, #448]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a6f      	ldr	r2, [pc, #444]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a6c      	ldr	r2, [pc, #432]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e00b      	b.n	8000f74 <HAL_RCC_OscConfig+0xb0>
 8000f5c:	4b69      	ldr	r3, [pc, #420]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a68      	ldr	r2, [pc, #416]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b66      	ldr	r3, [pc, #408]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a65      	ldr	r2, [pc, #404]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fcee 	bl	800095c <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fcea 	bl	800095c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	@ 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e207      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	4b5b      	ldr	r3, [pc, #364]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0xc0>
 8000fa2:	e014      	b.n	8000fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fcda 	bl	800095c <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fcd6 	bl	800095c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	@ 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1f3      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	4b51      	ldr	r3, [pc, #324]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0xe8>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d063      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000fda:	4b4a      	ldr	r3, [pc, #296]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe6:	4b47      	ldr	r3, [pc, #284]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d11c      	bne.n	800102c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff2:	4b44      	ldr	r3, [pc, #272]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d116      	bne.n	800102c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_RCC_OscConfig+0x152>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d001      	beq.n	8001016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e1c7      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001016:	4b3b      	ldr	r3, [pc, #236]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4937      	ldr	r1, [pc, #220]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	e03a      	b.n	80010a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d020      	beq.n	8001076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001034:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <HAL_RCC_OscConfig+0x244>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103a:	f7ff fc8f 	bl	800095c <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fc8b 	bl	800095c <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e1a8      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4925      	ldr	r1, [pc, #148]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <HAL_RCC_OscConfig+0x244>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107c:	f7ff fc6e 	bl	800095c <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fc6a 	bl	800095c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e187      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d036      	beq.n	800111c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d016      	beq.n	80010e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_RCC_OscConfig+0x248>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc4e 	bl	800095c <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc4a 	bl	800095c <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e167      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <HAL_RCC_OscConfig+0x240>)
 80010d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x200>
 80010e2:	e01b      	b.n	800111c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <HAL_RCC_OscConfig+0x248>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fc37 	bl	800095c <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	e00e      	b.n	8001110 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f2:	f7ff fc33 	bl	800095c <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d907      	bls.n	8001110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e150      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
 8001104:	40023800 	.word	0x40023800
 8001108:	42470000 	.word	0x42470000
 800110c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	4b88      	ldr	r3, [pc, #544]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 8001112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ea      	bne.n	80010f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8097 	beq.w	8001258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112e:	4b81      	ldr	r3, [pc, #516]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b7d      	ldr	r3, [pc, #500]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	4a7c      	ldr	r2, [pc, #496]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	@ 0x40
 800114a:	4b7a      	ldr	r3, [pc, #488]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001156:	2301      	movs	r3, #1
 8001158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115a:	4b77      	ldr	r3, [pc, #476]	@ (8001338 <HAL_RCC_OscConfig+0x474>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001162:	2b00      	cmp	r3, #0
 8001164:	d118      	bne.n	8001198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001166:	4b74      	ldr	r3, [pc, #464]	@ (8001338 <HAL_RCC_OscConfig+0x474>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a73      	ldr	r2, [pc, #460]	@ (8001338 <HAL_RCC_OscConfig+0x474>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001172:	f7ff fbf3 	bl	800095c <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117a:	f7ff fbef 	bl	800095c <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e10c      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	4b6a      	ldr	r3, [pc, #424]	@ (8001338 <HAL_RCC_OscConfig+0x474>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d106      	bne.n	80011ae <HAL_RCC_OscConfig+0x2ea>
 80011a0:	4b64      	ldr	r3, [pc, #400]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011a4:	4a63      	ldr	r2, [pc, #396]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ac:	e01c      	b.n	80011e8 <HAL_RCC_OscConfig+0x324>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x30c>
 80011b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80011c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0x324>
 80011d0:	4b58      	ldr	r3, [pc, #352]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d4:	4a57      	ldr	r2, [pc, #348]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6713      	str	r3, [r2, #112]	@ 0x70
 80011dc:	4b55      	ldr	r3, [pc, #340]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e0:	4a54      	ldr	r2, [pc, #336]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d015      	beq.n	800121c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fbb4 	bl	800095c <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f6:	e00a      	b.n	800120e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f8:	f7ff fbb0 	bl	800095c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e0cb      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120e:	4b49      	ldr	r3, [pc, #292]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0ee      	beq.n	80011f8 <HAL_RCC_OscConfig+0x334>
 800121a:	e014      	b.n	8001246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121c:	f7ff fb9e 	bl	800095c <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001224:	f7ff fb9a 	bl	800095c <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001232:	4293      	cmp	r3, r2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e0b5      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123a:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 800123c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1ee      	bne.n	8001224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124c:	4b39      	ldr	r3, [pc, #228]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a38      	ldr	r2, [pc, #224]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 8001252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80a1 	beq.w	80013a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001262:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b08      	cmp	r3, #8
 800126c:	d05c      	beq.n	8001328 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d141      	bne.n	80012fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001276:	4b31      	ldr	r3, [pc, #196]	@ (800133c <HAL_RCC_OscConfig+0x478>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fb6e 	bl	800095c <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff fb6a 	bl	800095c <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e087      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001296:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69da      	ldr	r2, [r3, #28]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b0:	019b      	lsls	r3, r3, #6
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	3b01      	subs	r3, #1
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	061b      	lsls	r3, r3, #24
 80012c6:	491b      	ldr	r1, [pc, #108]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_RCC_OscConfig+0x478>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fb43 	bl	800095c <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fb3f 	bl	800095c <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e05c      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x416>
 80012f8:	e054      	b.n	80013a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HAL_RCC_OscConfig+0x478>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fb2c 	bl	800095c <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fb28 	bl	800095c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e045      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_RCC_OscConfig+0x470>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x444>
 8001326:	e03d      	b.n	80013a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e038      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000
 800133c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_RCC_OscConfig+0x4ec>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d028      	beq.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d121      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d11a      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001370:	4013      	ands	r3, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001378:	4293      	cmp	r3, r2
 800137a:	d111      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	085b      	lsrs	r3, r3, #1
 8001388:	3b01      	subs	r3, #1
 800138a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0cc      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013c8:	4b68      	ldr	r3, [pc, #416]	@ (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d90c      	bls.n	80013f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d6:	4b65      	ldr	r3, [pc, #404]	@ (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b63      	ldr	r3, [pc, #396]	@ (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0b8      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001408:	4b59      	ldr	r3, [pc, #356]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a58      	ldr	r2, [pc, #352]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001412:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001420:	4b53      	ldr	r3, [pc, #332]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a52      	ldr	r2, [pc, #328]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800142a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800142c:	4b50      	ldr	r3, [pc, #320]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	494d      	ldr	r1, [pc, #308]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	4313      	orrs	r3, r2
 800143c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d044      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b47      	ldr	r3, [pc, #284]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d119      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e07f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d003      	beq.n	8001472 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800146e:	2b03      	cmp	r3, #3
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001472:	4b3f      	ldr	r3, [pc, #252]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	4b3b      	ldr	r3, [pc, #236]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e067      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001492:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f023 0203 	bic.w	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4934      	ldr	r1, [pc, #208]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fa5a 	bl	800095c <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ac:	f7ff fa56 	bl	800095c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e04f      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 020c 	and.w	r2, r3, #12
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d1eb      	bne.n	80014ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d4:	4b25      	ldr	r3, [pc, #148]	@ (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d20c      	bcs.n	80014fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e2:	4b22      	ldr	r3, [pc, #136]	@ (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e032      	b.n	8001562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4916      	ldr	r1, [pc, #88]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	490e      	ldr	r1, [pc, #56]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800153a:	f000 f821 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 800153e:	4602      	mov	r2, r0
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	490a      	ldr	r1, [pc, #40]	@ (8001574 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	5ccb      	ldrb	r3, [r1, r3]
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_RCC_ClockConfig+0x1c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f9ba 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023c00 	.word	0x40023c00
 8001570:	40023800 	.word	0x40023800
 8001574:	080043b0 	.word	0x080043b0
 8001578:	20000004 	.word	0x20000004
 800157c:	20000008 	.word	0x20000008

08001580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001584:	b090      	sub	sp, #64	@ 0x40
 8001586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001598:	4b59      	ldr	r3, [pc, #356]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d00d      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x40>
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	f200 80a1 	bhi.w	80016ec <HAL_RCC_GetSysClockFreq+0x16c>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d003      	beq.n	80015ba <HAL_RCC_GetSysClockFreq+0x3a>
 80015b2:	e09b      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_RCC_GetSysClockFreq+0x184>)
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015b8:	e09b      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ba:	4b53      	ldr	r3, [pc, #332]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x188>)
 80015bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015be:	e098      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d028      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	099b      	lsrs	r3, r3, #6
 80015dc:	2200      	movs	r2, #0
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015e8:	2100      	movs	r1, #0
 80015ea:	4b47      	ldr	r3, [pc, #284]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x188>)
 80015ec:	fb03 f201 	mul.w	r2, r3, r1
 80015f0:	2300      	movs	r3, #0
 80015f2:	fb00 f303 	mul.w	r3, r0, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	4a43      	ldr	r2, [pc, #268]	@ (8001708 <HAL_RCC_GetSysClockFreq+0x188>)
 80015fa:	fba0 1202 	umull	r1, r2, r0, r2
 80015fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001600:	460a      	mov	r2, r1
 8001602:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001606:	4413      	add	r3, r2
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800160a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800160c:	2200      	movs	r2, #0
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	61fa      	str	r2, [r7, #28]
 8001612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800161a:	f7fe fde1 	bl	80001e0 <__aeabi_uldivmod>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4613      	mov	r3, r2
 8001624:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001626:	e053      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b35      	ldr	r3, [pc, #212]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	2200      	movs	r2, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	617a      	str	r2, [r7, #20]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800163a:	f04f 0b00 	mov.w	fp, #0
 800163e:	4652      	mov	r2, sl
 8001640:	465b      	mov	r3, fp
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	0159      	lsls	r1, r3, #5
 800164c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001650:	0150      	lsls	r0, r2, #5
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	ebb2 080a 	subs.w	r8, r2, sl
 800165a:	eb63 090b 	sbc.w	r9, r3, fp
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800166a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800166e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001672:	ebb2 0408 	subs.w	r4, r2, r8
 8001676:	eb63 0509 	sbc.w	r5, r3, r9
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	00eb      	lsls	r3, r5, #3
 8001684:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001688:	00e2      	lsls	r2, r4, #3
 800168a:	4614      	mov	r4, r2
 800168c:	461d      	mov	r5, r3
 800168e:	eb14 030a 	adds.w	r3, r4, sl
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	eb45 030b 	adc.w	r3, r5, fp
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016a6:	4629      	mov	r1, r5
 80016a8:	028b      	lsls	r3, r1, #10
 80016aa:	4621      	mov	r1, r4
 80016ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b0:	4621      	mov	r1, r4
 80016b2:	028a      	lsls	r2, r1, #10
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ba:	2200      	movs	r2, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	60fa      	str	r2, [r7, #12]
 80016c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016c4:	f7fe fd8c 	bl	80001e0 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4613      	mov	r3, r2
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	3301      	adds	r3, #1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80016e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016ea:	e002      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_RCC_GetSysClockFreq+0x184>)
 80016ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3740      	adds	r7, #64	@ 0x40
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	00f42400 	.word	0x00f42400
 8001708:	017d7840 	.word	0x017d7840

0800170c <__NVIC_SetPriority>:
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	@ (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001764:	2100      	movs	r1, #0
 8001766:	f06f 0004 	mvn.w	r0, #4
 800176a:	f7ff ffcf 	bl	800170c <__NVIC_SetPriority>
#endif
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800177a:	f3ef 8305 	mrs	r3, IPSR
 800177e:	603b      	str	r3, [r7, #0]
  return(result);
 8001780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001786:	f06f 0305 	mvn.w	r3, #5
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	e00c      	b.n	80017a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <osKernelInitialize+0x44>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <osKernelInitialize+0x44>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	e002      	b.n	80017a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000044 	.word	0x20000044

080017bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017c2:	f3ef 8305 	mrs	r3, IPSR
 80017c6:	603b      	str	r3, [r7, #0]
  return(result);
 80017c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80017ce:	f06f 0305 	mvn.w	r3, #5
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	e010      	b.n	80017f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <osKernelStart+0x48>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d109      	bne.n	80017f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80017de:	f7ff ffbf 	bl	8001760 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <osKernelStart+0x48>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80017e8:	f001 f87a 	bl	80028e0 <vTaskStartScheduler>
      stat = osOK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	e002      	b.n	80017f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000044 	.word	0x20000044

08001808 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	@ 0x38
 800180c:	af04      	add	r7, sp, #16
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001818:	f3ef 8305 	mrs	r3, IPSR
 800181c:	617b      	str	r3, [r7, #20]
  return(result);
 800181e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001820:	2b00      	cmp	r3, #0
 8001822:	d17e      	bne.n	8001922 <osThreadNew+0x11a>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d07b      	beq.n	8001922 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800182a:	2380      	movs	r3, #128	@ 0x80
 800182c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800182e:	2318      	movs	r3, #24
 8001830:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d045      	beq.n	80018ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <osThreadNew+0x48>
        name = attr->name;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <osThreadNew+0x6e>
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b38      	cmp	r3, #56	@ 0x38
 8001868:	d805      	bhi.n	8001876 <osThreadNew+0x6e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <osThreadNew+0x72>
        return (NULL);
 8001876:	2300      	movs	r3, #0
 8001878:	e054      	b.n	8001924 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00e      	beq.n	80018b0 <osThreadNew+0xa8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b5b      	cmp	r3, #91	@ 0x5b
 8001898:	d90a      	bls.n	80018b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <osThreadNew+0xa8>
        mem = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	e010      	b.n	80018d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10c      	bne.n	80018d2 <osThreadNew+0xca>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d108      	bne.n	80018d2 <osThreadNew+0xca>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d104      	bne.n	80018d2 <osThreadNew+0xca>
          mem = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	e001      	b.n	80018d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d110      	bne.n	80018fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018e0:	9202      	str	r2, [sp, #8]
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	6a3a      	ldr	r2, [r7, #32]
 80018ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fe1a 	bl	8002528 <xTaskCreateStatic>
 80018f4:	4603      	mov	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	e013      	b.n	8001922 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d110      	bne.n	8001922 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	b29a      	uxth	r2, r3
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fe68 	bl	80025e8 <xTaskCreate>
 8001918:	4603      	mov	r3, r0
 800191a:	2b01      	cmp	r3, #1
 800191c:	d001      	beq.n	8001922 <osThreadNew+0x11a>
            hTask = NULL;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001922:	693b      	ldr	r3, [r7, #16]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3728      	adds	r7, #40	@ 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001934:	f3ef 8305 	mrs	r3, IPSR
 8001938:	60bb      	str	r3, [r7, #8]
  return(result);
 800193a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <osDelay+0x1c>
    stat = osErrorISR;
 8001940:	f06f 0305 	mvn.w	r3, #5
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e007      	b.n	8001958 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 ff8e 	bl	8002874 <vTaskDelay>
    }
  }

  return (stat);
 8001958:	68fb      	ldr	r3, [r7, #12]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <vApplicationGetIdleTaskMemory+0x2c>)
 8001974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4a06      	ldr	r2, [pc, #24]	@ (8001994 <vApplicationGetIdleTaskMemory+0x30>)
 800197a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2280      	movs	r2, #128	@ 0x80
 8001980:	601a      	str	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000048 	.word	0x20000048
 8001994:	200000a4 	.word	0x200000a4

08001998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80019a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4a06      	ldr	r2, [pc, #24]	@ (80019c8 <vApplicationGetTimerTaskMemory+0x30>)
 80019ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	200002a4 	.word	0x200002a4
 80019c8:	20000300 	.word	0x20000300

080019cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 0208 	add.w	r2, r3, #8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f103 0208 	add.w	r2, r3, #8
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 0208 	add.w	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d103      	bne.n	8001a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e00c      	b.n	8001aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3308      	adds	r3, #8
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	e002      	b.n	8001a9c <vListInsert+0x2e>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d2f6      	bcs.n	8001a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6892      	ldr	r2, [r2, #8]
 8001af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6852      	ldr	r2, [r2, #4]
 8001b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d103      	bne.n	8001b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	1e5a      	subs	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10b      	bne.n	8001b60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b4c:	f383 8811 	msr	BASEPRI, r3
 8001b50:	f3bf 8f6f 	isb	sy
 8001b54:	f3bf 8f4f 	dsb	sy
 8001b58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b60:	f002 f87a 	bl	8003c58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	441a      	add	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b90:	3b01      	subs	r3, #1
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	441a      	add	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	22ff      	movs	r2, #255	@ 0xff
 8001ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	22ff      	movs	r2, #255	@ 0xff
 8001bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d114      	bne.n	8001be0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d01a      	beq.n	8001bf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3310      	adds	r3, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 f91a 	bl	8002dfc <xTaskRemoveFromEventList>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d012      	beq.n	8001bf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001bce:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <xQueueGenericReset+0xd0>)
 8001bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f3bf 8f4f 	dsb	sy
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	e009      	b.n	8001bf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3310      	adds	r3, #16
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fef1 	bl	80019cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3324      	adds	r3, #36	@ 0x24
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff feec 	bl	80019cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001bf4:	f002 f862 	bl	8003cbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000ed04 	.word	0xe000ed04

08001c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08e      	sub	sp, #56	@ 0x38
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10b      	bne.n	8001c34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c20:	f383 8811 	msr	BASEPRI, r3
 8001c24:	f3bf 8f6f 	isb	sy
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10b      	bne.n	8001c52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c3e:	f383 8811 	msr	BASEPRI, r3
 8001c42:	f3bf 8f6f 	isb	sy
 8001c46:	f3bf 8f4f 	dsb	sy
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	e7fd      	b.n	8001c4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <xQueueGenericCreateStatic+0x56>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <xQueueGenericCreateStatic+0x5a>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <xQueueGenericCreateStatic+0x5c>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10b      	bne.n	8001c80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	623b      	str	r3, [r7, #32]
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <xQueueGenericCreateStatic+0x84>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <xQueueGenericCreateStatic+0x88>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <xQueueGenericCreateStatic+0x8a>
 8001c90:	2300      	movs	r3, #0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c9a:	f383 8811 	msr	BASEPRI, r3
 8001c9e:	f3bf 8f6f 	isb	sy
 8001ca2:	f3bf 8f4f 	dsb	sy
 8001ca6:	61fb      	str	r3, [r7, #28]
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	e7fd      	b.n	8001caa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001cae:	2350      	movs	r3, #80	@ 0x50
 8001cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b50      	cmp	r3, #80	@ 0x50
 8001cb6:	d00b      	beq.n	8001cd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cbc:	f383 8811 	msr	BASEPRI, r3
 8001cc0:	f3bf 8f6f 	isb	sy
 8001cc4:	f3bf 8f4f 	dsb	sy
 8001cc8:	61bb      	str	r3, [r7, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001cd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00d      	beq.n	8001cf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ce4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f805 	bl	8001d02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3730      	adds	r7, #48	@ 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e002      	b.n	8001d24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d30:	2101      	movs	r1, #1
 8001d32:	69b8      	ldr	r0, [r7, #24]
 8001d34:	f7ff fefe 	bl	8001b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	@ 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10b      	bne.n	8001d7c <xQueueGenericSend+0x34>
	__asm volatile
 8001d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <xQueueGenericSend+0x42>
 8001d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <xQueueGenericSend+0x46>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <xQueueGenericSend+0x48>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10b      	bne.n	8001dac <xQueueGenericSend+0x64>
	__asm volatile
 8001d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d98:	f383 8811 	msr	BASEPRI, r3
 8001d9c:	f3bf 8f6f 	isb	sy
 8001da0:	f3bf 8f4f 	dsb	sy
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d103      	bne.n	8001dba <xQueueGenericSend+0x72>
 8001db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <xQueueGenericSend+0x76>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <xQueueGenericSend+0x78>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <xQueueGenericSend+0x94>
	__asm volatile
 8001dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 8001dcc:	f3bf 8f6f 	isb	sy
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	623b      	str	r3, [r7, #32]
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ddc:	f001 f9ce 	bl	800317c <xTaskGetSchedulerState>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <xQueueGenericSend+0xa4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <xQueueGenericSend+0xa8>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <xQueueGenericSend+0xaa>
 8001df0:	2300      	movs	r3, #0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10b      	bne.n	8001e0e <xQueueGenericSend+0xc6>
	__asm volatile
 8001df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dfa:	f383 8811 	msr	BASEPRI, r3
 8001dfe:	f3bf 8f6f 	isb	sy
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	61fb      	str	r3, [r7, #28]
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	e7fd      	b.n	8001e0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e0e:	f001 ff23 	bl	8003c58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <xQueueGenericSend+0xdc>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d129      	bne.n	8001e78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e2a:	f000 fa0f 	bl	800224c <prvCopyDataToQueue>
 8001e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d010      	beq.n	8001e5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3a:	3324      	adds	r3, #36	@ 0x24
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 ffdd 	bl	8002dfc <xTaskRemoveFromEventList>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e48:	4b3f      	ldr	r3, [pc, #252]	@ (8001f48 <xQueueGenericSend+0x200>)
 8001e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	f3bf 8f6f 	isb	sy
 8001e58:	e00a      	b.n	8001e70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e60:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <xQueueGenericSend+0x200>)
 8001e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f3bf 8f4f 	dsb	sy
 8001e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e70:	f001 ff24 	bl	8003cbc <vPortExitCritical>
				return pdPASS;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e063      	b.n	8001f40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e7e:	f001 ff1d 	bl	8003cbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e05c      	b.n	8001f40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 f817 	bl	8002ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e9a:	f001 ff0f 	bl	8003cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e9e:	f000 fd87 	bl	80029b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ea2:	f001 fed9 	bl	8003c58 <vPortEnterCritical>
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	d103      	bne.n	8001ebc <xQueueGenericSend+0x174>
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d103      	bne.n	8001ed2 <xQueueGenericSend+0x18a>
 8001eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001ed2:	f001 fef3 	bl	8003cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ed6:	1d3a      	adds	r2, r7, #4
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 f806 	bl	8002ef0 <xTaskCheckForTimeOut>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d124      	bne.n	8001f34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001eec:	f000 faa6 	bl	800243c <prvIsQueueFull>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d018      	beq.n	8001f28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef8:	3310      	adds	r3, #16
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 ff2a 	bl	8002d58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f06:	f000 fa31 	bl	800236c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f0a:	f000 fd5f 	bl	80029cc <xTaskResumeAll>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f47f af7c 	bne.w	8001e0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <xQueueGenericSend+0x200>)
 8001f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f3bf 8f4f 	dsb	sy
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	e772      	b.n	8001e0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f2a:	f000 fa1f 	bl	800236c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f2e:	f000 fd4d 	bl	80029cc <xTaskResumeAll>
 8001f32:	e76c      	b.n	8001e0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f36:	f000 fa19 	bl	800236c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f3a:	f000 fd47 	bl	80029cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3738      	adds	r7, #56	@ 0x38
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	e000ed04 	.word	0xe000ed04

08001f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b090      	sub	sp, #64	@ 0x40
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10b      	bne.n	8001f7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d103      	bne.n	8001f8a <xQueueGenericSendFromISR+0x3e>
 8001f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <xQueueGenericSendFromISR+0x42>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <xQueueGenericSendFromISR+0x44>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d103      	bne.n	8001fba <xQueueGenericSendFromISR+0x6e>
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <xQueueGenericSendFromISR+0x72>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <xQueueGenericSendFromISR+0x74>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10b      	bne.n	8001fdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	623b      	str	r3, [r7, #32]
}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fdc:	f001 ff1c 	bl	8003e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8001fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	61fa      	str	r2, [r7, #28]
 8001ff6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002004:	429a      	cmp	r2, r3
 8002006:	d302      	bcc.n	800200e <xQueueGenericSendFromISR+0xc2>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d12f      	bne.n	800206e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800200e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002024:	f000 f912 	bl	800224c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002028:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d112      	bne.n	8002058 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	2b00      	cmp	r3, #0
 8002038:	d016      	beq.n	8002068 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800203a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203c:	3324      	adds	r3, #36	@ 0x24
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fedc 	bl	8002dfc <xTaskRemoveFromEventList>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00e      	beq.n	8002068 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e007      	b.n	8002068 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800205c:	3301      	adds	r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b25a      	sxtb	r2, r3
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002068:	2301      	movs	r3, #1
 800206a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800206c:	e001      	b.n	8002072 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800206e:	2300      	movs	r3, #0
 8002070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002074:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800207c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800207e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002080:	4618      	mov	r0, r3
 8002082:	3740      	adds	r7, #64	@ 0x40
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	@ 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10b      	bne.n	80020ba <xQueueReceive+0x32>
	__asm volatile
 80020a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	623b      	str	r3, [r7, #32]
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	e7fd      	b.n	80020b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <xQueueReceive+0x40>
 80020c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <xQueueReceive+0x44>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <xQueueReceive+0x46>
 80020cc:	2300      	movs	r3, #0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10b      	bne.n	80020ea <xQueueReceive+0x62>
	__asm volatile
 80020d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020d6:	f383 8811 	msr	BASEPRI, r3
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	f3bf 8f4f 	dsb	sy
 80020e2:	61fb      	str	r3, [r7, #28]
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	e7fd      	b.n	80020e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020ea:	f001 f847 	bl	800317c <xTaskGetSchedulerState>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <xQueueReceive+0x72>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <xQueueReceive+0x76>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <xQueueReceive+0x78>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <xQueueReceive+0x94>
	__asm volatile
 8002104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002108:	f383 8811 	msr	BASEPRI, r3
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	61bb      	str	r3, [r7, #24]
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800211c:	f001 fd9c 	bl	8003c58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01f      	beq.n	800216c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002130:	f000 f8f6 	bl	8002320 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00f      	beq.n	8002164 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002146:	3310      	adds	r3, #16
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fe57 	bl	8002dfc <xTaskRemoveFromEventList>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002154:	4b3c      	ldr	r3, [pc, #240]	@ (8002248 <xQueueReceive+0x1c0>)
 8002156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002164:	f001 fdaa 	bl	8003cbc <vPortExitCritical>
				return pdPASS;
 8002168:	2301      	movs	r3, #1
 800216a:	e069      	b.n	8002240 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002172:	f001 fda3 	bl	8003cbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002176:	2300      	movs	r3, #0
 8002178:	e062      	b.n	8002240 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800217a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fe9d 	bl	8002ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800218a:	2301      	movs	r3, #1
 800218c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800218e:	f001 fd95 	bl	8003cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002192:	f000 fc0d 	bl	80029b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002196:	f001 fd5f 	bl	8003c58 <vPortEnterCritical>
 800219a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d103      	bne.n	80021b0 <xQueueReceive+0x128>
 80021a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d103      	bne.n	80021c6 <xQueueReceive+0x13e>
 80021be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021c6:	f001 fd79 	bl	8003cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021ca:	1d3a      	adds	r2, r7, #4
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fe8c 	bl	8002ef0 <xTaskCheckForTimeOut>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d123      	bne.n	8002226 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021e0:	f000 f916 	bl	8002410 <prvIsQueueEmpty>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d017      	beq.n	800221a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	3324      	adds	r3, #36	@ 0x24
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fdb0 	bl	8002d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021fa:	f000 f8b7 	bl	800236c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021fe:	f000 fbe5 	bl	80029cc <xTaskResumeAll>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d189      	bne.n	800211c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <xQueueReceive+0x1c0>)
 800220a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	e780      	b.n	800211c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800221a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800221c:	f000 f8a6 	bl	800236c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002220:	f000 fbd4 	bl	80029cc <xTaskResumeAll>
 8002224:	e77a      	b.n	800211c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002228:	f000 f8a0 	bl	800236c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800222c:	f000 fbce 	bl	80029cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002232:	f000 f8ed 	bl	8002410 <prvIsQueueEmpty>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f43f af6f 	beq.w	800211c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800223e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002240:	4618      	mov	r0, r3
 8002242:	3730      	adds	r7, #48	@ 0x30
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	e000ed04 	.word	0xe000ed04

0800224c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d14d      	bne.n	800230e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 ff9e 	bl	80031b8 <xTaskPriorityDisinherit>
 800227c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e043      	b.n	800230e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d119      	bne.n	80022c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6858      	ldr	r0, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	461a      	mov	r2, r3
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	f002 f81a 	bl	80042d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	441a      	add	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d32b      	bcc.n	800230e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e026      	b.n	800230e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68d8      	ldr	r0, [r3, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	461a      	mov	r2, r3
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	f002 f800 	bl	80042d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	425b      	negs	r3, r3
 80022da:	441a      	add	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	425b      	negs	r3, r3
 80022f6:	441a      	add	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d105      	bne.n	800230e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	3b01      	subs	r3, #1
 800230c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002316:	697b      	ldr	r3, [r7, #20]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d018      	beq.n	8002364 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	441a      	add	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	429a      	cmp	r2, r3
 800234a:	d303      	bcc.n	8002354 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68d9      	ldr	r1, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	461a      	mov	r2, r3
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f001 ffb6 	bl	80042d0 <memcpy>
	}
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002374:	f001 fc70 	bl	8003c58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800237e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002380:	e011      	b.n	80023a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3324      	adds	r3, #36	@ 0x24
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fd34 	bl	8002dfc <xTaskRemoveFromEventList>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800239a:	f000 fe0d 	bl	8002fb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dce9      	bgt.n	8002382 <prvUnlockQueue+0x16>
 80023ae:	e000      	b.n	80023b2 <prvUnlockQueue+0x46>
					break;
 80023b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	22ff      	movs	r2, #255	@ 0xff
 80023b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80023ba:	f001 fc7f 	bl	8003cbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023be:	f001 fc4b 	bl	8003c58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023ca:	e011      	b.n	80023f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3310      	adds	r3, #16
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fd0f 	bl	8002dfc <xTaskRemoveFromEventList>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80023e4:	f000 fde8 	bl	8002fb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023e8:	7bbb      	ldrb	r3, [r7, #14]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	dce9      	bgt.n	80023cc <prvUnlockQueue+0x60>
 80023f8:	e000      	b.n	80023fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80023fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	22ff      	movs	r2, #255	@ 0xff
 8002400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002404:	f001 fc5a 	bl	8003cbc <vPortExitCritical>
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002418:	f001 fc1e 	bl	8003c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002424:	2301      	movs	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e001      	b.n	800242e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800242e:	f001 fc45 	bl	8003cbc <vPortExitCritical>

	return xReturn;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002444:	f001 fc08 	bl	8003c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002450:	429a      	cmp	r2, r3
 8002452:	d102      	bne.n	800245a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002454:	2301      	movs	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e001      	b.n	800245e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800245e:	f001 fc2d 	bl	8003cbc <vPortExitCritical>

	return xReturn;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e014      	b.n	80024a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800247c:	4a0f      	ldr	r2, [pc, #60]	@ (80024bc <vQueueAddToRegistry+0x50>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002488:	490c      	ldr	r1, [pc, #48]	@ (80024bc <vQueueAddToRegistry+0x50>)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <vQueueAddToRegistry+0x50>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800249e:	e006      	b.n	80024ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3301      	adds	r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b07      	cmp	r3, #7
 80024aa:	d9e7      	bls.n	800247c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000700 	.word	0x20000700

080024c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024d0:	f001 fbc2 	bl	8003c58 <vPortEnterCritical>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d103      	bne.n	80024ea <vQueueWaitForMessageRestricted+0x2a>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d103      	bne.n	8002500 <vQueueWaitForMessageRestricted+0x40>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002500:	f001 fbdc 	bl	8003cbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3324      	adds	r3, #36	@ 0x24
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fc45 	bl	8002da4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff26 	bl	800236c <prvUnlockQueue>
	}
 8002520:	bf00      	nop
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08e      	sub	sp, #56	@ 0x38
 800252c:	af04      	add	r7, sp, #16
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <xTaskCreateStatic+0x2c>
	__asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	623b      	str	r3, [r7, #32]
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <xTaskCreateStatic+0x4a>
	__asm volatile
 800255a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	61fb      	str	r3, [r7, #28]
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	e7fd      	b.n	800256e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002572:	235c      	movs	r3, #92	@ 0x5c
 8002574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b5c      	cmp	r3, #92	@ 0x5c
 800257a:	d00b      	beq.n	8002594 <xTaskCreateStatic+0x6c>
	__asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	61bb      	str	r3, [r7, #24]
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01e      	beq.n	80025da <xTaskCreateStatic+0xb2>
 800259c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01b      	beq.n	80025da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80025a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80025b4:	2300      	movs	r3, #0
 80025b6:	9303      	str	r3, [sp, #12]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f850 	bl	8002672 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025d4:	f000 f8de 	bl	8002794 <prvAddNewTaskToReadyList>
 80025d8:	e001      	b.n	80025de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80025de:	697b      	ldr	r3, [r7, #20]
	}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3728      	adds	r7, #40	@ 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	@ 0x30
 80025ec:	af04      	add	r7, sp, #16
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 fc4d 	bl	8003e9c <pvPortMalloc>
 8002602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00e      	beq.n	8002628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800260a:	205c      	movs	r0, #92	@ 0x5c
 800260c:	f001 fc46 	bl	8003e9c <pvPortMalloc>
 8002610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30
 800261e:	e005      	b.n	800262c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002620:	6978      	ldr	r0, [r7, #20]
 8002622:	f001 fd09 	bl	8004038 <vPortFree>
 8002626:	e001      	b.n	800262c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d017      	beq.n	8002662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800263a:	88fa      	ldrh	r2, [r7, #6]
 800263c:	2300      	movs	r3, #0
 800263e:	9303      	str	r3, [sp, #12]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	9302      	str	r3, [sp, #8]
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f80e 	bl	8002672 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002656:	69f8      	ldr	r0, [r7, #28]
 8002658:	f000 f89c 	bl	8002794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800265c:	2301      	movs	r3, #1
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e002      	b.n	8002668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002668:	69bb      	ldr	r3, [r7, #24]
	}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b088      	sub	sp, #32
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002682:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	461a      	mov	r2, r3
 800268a:	21a5      	movs	r1, #165	@ 0xa5
 800268c:	f001 fdf4 	bl	8004278 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800269a:	3b01      	subs	r3, #1
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f023 0307 	bic.w	r3, r3, #7
 80026a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	617b      	str	r3, [r7, #20]
}
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01f      	beq.n	8002712 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e012      	b.n	80026fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	7819      	ldrb	r1, [r3, #0]
 80026e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	3334      	adds	r3, #52	@ 0x34
 80026e8:	460a      	mov	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	3301      	adds	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d9e9      	bls.n	80026d8 <prvInitialiseNewTask+0x66>
 8002704:	e000      	b.n	8002708 <prvInitialiseNewTask+0x96>
			{
				break;
 8002706:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002710:	e003      	b.n	800271a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800271a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271c:	2b37      	cmp	r3, #55	@ 0x37
 800271e:	d901      	bls.n	8002724 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002720:	2337      	movs	r3, #55	@ 0x37
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002728:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800272e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002732:	2200      	movs	r2, #0
 8002734:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	3304      	adds	r3, #4
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff f966 	bl	8001a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002742:	3318      	adds	r3, #24
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff f961 	bl	8001a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800274e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002752:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800275a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	2200      	movs	r2, #0
 8002764:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	69b8      	ldr	r0, [r7, #24]
 8002774:	f001 f93e 	bl	80039f4 <pxPortInitialiseStack>
 8002778:	4602      	mov	r2, r0
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800278a:	bf00      	nop
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800279c:	f001 fa5c 	bl	8003c58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <prvAddNewTaskToReadyList+0xc4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002858 <prvAddNewTaskToReadyList+0xc4>)
 80027a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80027aa:	4b2c      	ldr	r3, [pc, #176]	@ (800285c <prvAddNewTaskToReadyList+0xc8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80027b2:	4a2a      	ldr	r2, [pc, #168]	@ (800285c <prvAddNewTaskToReadyList+0xc8>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027b8:	4b27      	ldr	r3, [pc, #156]	@ (8002858 <prvAddNewTaskToReadyList+0xc4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d110      	bne.n	80027e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80027c0:	f000 fc1e 	bl	8003000 <prvInitialiseTaskLists>
 80027c4:	e00d      	b.n	80027e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80027c6:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <prvAddNewTaskToReadyList+0xcc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027ce:	4b23      	ldr	r3, [pc, #140]	@ (800285c <prvAddNewTaskToReadyList+0xc8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	429a      	cmp	r2, r3
 80027da:	d802      	bhi.n	80027e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027dc:	4a1f      	ldr	r2, [pc, #124]	@ (800285c <prvAddNewTaskToReadyList+0xc8>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027e2:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <prvAddNewTaskToReadyList+0xd0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002864 <prvAddNewTaskToReadyList+0xd0>)
 80027ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <prvAddNewTaskToReadyList+0xd0>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002868 <prvAddNewTaskToReadyList+0xd4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d903      	bls.n	8002808 <prvAddNewTaskToReadyList+0x74>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <prvAddNewTaskToReadyList+0xd4>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4a15      	ldr	r2, [pc, #84]	@ (800286c <prvAddNewTaskToReadyList+0xd8>)
 8002816:	441a      	add	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f7ff f901 	bl	8001a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002824:	f001 fa4a 	bl	8003cbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <prvAddNewTaskToReadyList+0xcc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00e      	beq.n	800284e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002830:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <prvAddNewTaskToReadyList+0xc8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	429a      	cmp	r2, r3
 800283c:	d207      	bcs.n	800284e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800283e:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <prvAddNewTaskToReadyList+0xdc>)
 8002840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000c14 	.word	0x20000c14
 800285c:	20000740 	.word	0x20000740
 8002860:	20000c20 	.word	0x20000c20
 8002864:	20000c30 	.word	0x20000c30
 8002868:	20000c1c 	.word	0x20000c1c
 800286c:	20000744 	.word	0x20000744
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d018      	beq.n	80028b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002886:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <vTaskDelay+0x64>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <vTaskDelay+0x32>
	__asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	60bb      	str	r3, [r7, #8]
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80028a6:	f000 f883 	bl	80029b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028aa:	2100      	movs	r1, #0
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fcf3 	bl	8003298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80028b2:	f000 f88b 	bl	80029cc <xTaskResumeAll>
 80028b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d107      	bne.n	80028ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80028be:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <vTaskDelay+0x68>)
 80028c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000c3c 	.word	0x20000c3c
 80028dc:	e000ed04 	.word	0xe000ed04

080028e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028ee:	463a      	mov	r2, r7
 80028f0:	1d39      	adds	r1, r7, #4
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f834 	bl	8001964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80028fc:	6839      	ldr	r1, [r7, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	9202      	str	r2, [sp, #8]
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2300      	movs	r3, #0
 800290c:	460a      	mov	r2, r1
 800290e:	4922      	ldr	r1, [pc, #136]	@ (8002998 <vTaskStartScheduler+0xb8>)
 8002910:	4822      	ldr	r0, [pc, #136]	@ (800299c <vTaskStartScheduler+0xbc>)
 8002912:	f7ff fe09 	bl	8002528 <xTaskCreateStatic>
 8002916:	4603      	mov	r3, r0
 8002918:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <vTaskStartScheduler+0xc0>)
 800291a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800291c:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <vTaskStartScheduler+0xc0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002924:	2301      	movs	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e001      	b.n	800292e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d102      	bne.n	800293a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002934:	f000 fd04 	bl	8003340 <xTimerCreateTimerTask>
 8002938:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d116      	bne.n	800296e <vTaskStartScheduler+0x8e>
	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	613b      	str	r3, [r7, #16]
}
 8002952:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002954:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <vTaskStartScheduler+0xc4>)
 8002956:	f04f 32ff 	mov.w	r2, #4294967295
 800295a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800295c:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <vTaskStartScheduler+0xc8>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <vTaskStartScheduler+0xcc>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002968:	f001 f8d2 	bl	8003b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800296c:	e00f      	b.n	800298e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d10b      	bne.n	800298e <vTaskStartScheduler+0xae>
	__asm volatile
 8002976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	60fb      	str	r3, [r7, #12]
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	e7fd      	b.n	800298a <vTaskStartScheduler+0xaa>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	0800432c 	.word	0x0800432c
 800299c:	08002fd1 	.word	0x08002fd1
 80029a0:	20000c38 	.word	0x20000c38
 80029a4:	20000c34 	.word	0x20000c34
 80029a8:	20000c20 	.word	0x20000c20
 80029ac:	20000c18 	.word	0x20000c18

080029b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <vTaskSuspendAll+0x18>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	4a03      	ldr	r2, [pc, #12]	@ (80029c8 <vTaskSuspendAll+0x18>)
 80029bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	20000c3c 	.word	0x20000c3c

080029cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029da:	4b42      	ldr	r3, [pc, #264]	@ (8002ae4 <xTaskResumeAll+0x118>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10b      	bne.n	80029fa <xTaskResumeAll+0x2e>
	__asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	603b      	str	r3, [r7, #0]
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	e7fd      	b.n	80029f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029fa:	f001 f92d 	bl	8003c58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029fe:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <xTaskResumeAll+0x118>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	4a37      	ldr	r2, [pc, #220]	@ (8002ae4 <xTaskResumeAll+0x118>)
 8002a06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a08:	4b36      	ldr	r3, [pc, #216]	@ (8002ae4 <xTaskResumeAll+0x118>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d162      	bne.n	8002ad6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a10:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <xTaskResumeAll+0x11c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05e      	beq.n	8002ad6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a18:	e02f      	b.n	8002a7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a1a:	4b34      	ldr	r3, [pc, #208]	@ (8002aec <xTaskResumeAll+0x120>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3318      	adds	r3, #24
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f85a 	bl	8001ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff f855 	bl	8001ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <xTaskResumeAll+0x124>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d903      	bls.n	8002a4a <xTaskResumeAll+0x7e>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	4a2a      	ldr	r2, [pc, #168]	@ (8002af0 <xTaskResumeAll+0x124>)
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4a27      	ldr	r2, [pc, #156]	@ (8002af4 <xTaskResumeAll+0x128>)
 8002a58:	441a      	add	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f7fe ffe0 	bl	8001a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6a:	4b23      	ldr	r3, [pc, #140]	@ (8002af8 <xTaskResumeAll+0x12c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d302      	bcc.n	8002a7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002a74:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <xTaskResumeAll+0x130>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002aec <xTaskResumeAll+0x120>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1cb      	bne.n	8002a1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a88:	f000 fb58 	bl	800313c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <xTaskResumeAll+0x134>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a98:	f000 f846 	bl	8002b28 <xTaskIncrementTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002aa2:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <xTaskResumeAll+0x130>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f1      	bne.n	8002a98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	@ (8002b00 <xTaskResumeAll+0x134>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <xTaskResumeAll+0x130>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <xTaskResumeAll+0x138>)
 8002ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ad6:	f001 f8f1 	bl	8003cbc <vPortExitCritical>

	return xAlreadyYielded;
 8002ada:	68bb      	ldr	r3, [r7, #8]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000c3c 	.word	0x20000c3c
 8002ae8:	20000c14 	.word	0x20000c14
 8002aec:	20000bd4 	.word	0x20000bd4
 8002af0:	20000c1c 	.word	0x20000c1c
 8002af4:	20000744 	.word	0x20000744
 8002af8:	20000740 	.word	0x20000740
 8002afc:	20000c28 	.word	0x20000c28
 8002b00:	20000c24 	.word	0x20000c24
 8002b04:	e000ed04 	.word	0xe000ed04

08002b08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <xTaskGetTickCount+0x1c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b14:	687b      	ldr	r3, [r7, #4]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000c18 	.word	0x20000c18

08002b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b32:	4b4f      	ldr	r3, [pc, #316]	@ (8002c70 <xTaskIncrementTick+0x148>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 8090 	bne.w	8002c5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c74 <xTaskIncrementTick+0x14c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b44:	4a4b      	ldr	r2, [pc, #300]	@ (8002c74 <xTaskIncrementTick+0x14c>)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d121      	bne.n	8002b94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b50:	4b49      	ldr	r3, [pc, #292]	@ (8002c78 <xTaskIncrementTick+0x150>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	603b      	str	r3, [r7, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	e7fd      	b.n	8002b6e <xTaskIncrementTick+0x46>
 8002b72:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <xTaskIncrementTick+0x150>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	4b40      	ldr	r3, [pc, #256]	@ (8002c7c <xTaskIncrementTick+0x154>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8002c78 <xTaskIncrementTick+0x150>)
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4a3e      	ldr	r2, [pc, #248]	@ (8002c7c <xTaskIncrementTick+0x154>)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <xTaskIncrementTick+0x158>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c80 <xTaskIncrementTick+0x158>)
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	f000 fad4 	bl	800313c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b94:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <xTaskIncrementTick+0x15c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d349      	bcc.n	8002c32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b9e:	4b36      	ldr	r3, [pc, #216]	@ (8002c78 <xTaskIncrementTick+0x150>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba8:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <xTaskIncrementTick+0x15c>)
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	601a      	str	r2, [r3, #0]
					break;
 8002bb0:	e03f      	b.n	8002c32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb2:	4b31      	ldr	r3, [pc, #196]	@ (8002c78 <xTaskIncrementTick+0x150>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d203      	bcs.n	8002bd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002bca:	4a2e      	ldr	r2, [pc, #184]	@ (8002c84 <xTaskIncrementTick+0x15c>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002bd0:	e02f      	b.n	8002c32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe ff82 	bl	8001ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3318      	adds	r3, #24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe ff79 	bl	8001ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf2:	4b25      	ldr	r3, [pc, #148]	@ (8002c88 <xTaskIncrementTick+0x160>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d903      	bls.n	8002c02 <xTaskIncrementTick+0xda>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	4a22      	ldr	r2, [pc, #136]	@ (8002c88 <xTaskIncrementTick+0x160>)
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <xTaskIncrementTick+0x164>)
 8002c10:	441a      	add	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3304      	adds	r3, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f7fe ff04 	bl	8001a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <xTaskIncrementTick+0x168>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3b8      	bcc.n	8002b9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c30:	e7b5      	b.n	8002b9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c32:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <xTaskIncrementTick+0x168>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c38:	4914      	ldr	r1, [pc, #80]	@ (8002c8c <xTaskIncrementTick+0x164>)
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d901      	bls.n	8002c4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <xTaskIncrementTick+0x16c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002c56:	2301      	movs	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e004      	b.n	8002c66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <xTaskIncrementTick+0x170>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <xTaskIncrementTick+0x170>)
 8002c64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c66:	697b      	ldr	r3, [r7, #20]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000c3c 	.word	0x20000c3c
 8002c74:	20000c18 	.word	0x20000c18
 8002c78:	20000bcc 	.word	0x20000bcc
 8002c7c:	20000bd0 	.word	0x20000bd0
 8002c80:	20000c2c 	.word	0x20000c2c
 8002c84:	20000c34 	.word	0x20000c34
 8002c88:	20000c1c 	.word	0x20000c1c
 8002c8c:	20000744 	.word	0x20000744
 8002c90:	20000740 	.word	0x20000740
 8002c94:	20000c28 	.word	0x20000c28
 8002c98:	20000c24 	.word	0x20000c24

08002c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ca2:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <vTaskSwitchContext+0xa8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002caa:	4b27      	ldr	r3, [pc, #156]	@ (8002d48 <vTaskSwitchContext+0xac>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002cb0:	e042      	b.n	8002d38 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002cb2:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <vTaskSwitchContext+0xac>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cb8:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <vTaskSwitchContext+0xb0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e011      	b.n	8002ce4 <vTaskSwitchContext+0x48>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <vTaskSwitchContext+0x42>
	__asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	607b      	str	r3, [r7, #4]
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <vTaskSwitchContext+0x3e>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	491a      	ldr	r1, [pc, #104]	@ (8002d50 <vTaskSwitchContext+0xb4>)
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0e3      	beq.n	8002cc0 <vTaskSwitchContext+0x24>
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4a13      	ldr	r2, [pc, #76]	@ (8002d50 <vTaskSwitchContext+0xb4>)
 8002d04:	4413      	add	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	3308      	adds	r3, #8
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d104      	bne.n	8002d28 <vTaskSwitchContext+0x8c>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a09      	ldr	r2, [pc, #36]	@ (8002d54 <vTaskSwitchContext+0xb8>)
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4a06      	ldr	r2, [pc, #24]	@ (8002d4c <vTaskSwitchContext+0xb0>)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20000c3c 	.word	0x20000c3c
 8002d48:	20000c28 	.word	0x20000c28
 8002d4c:	20000c1c 	.word	0x20000c1c
 8002d50:	20000744 	.word	0x20000744
 8002d54:	20000740 	.word	0x20000740

08002d58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60fb      	str	r3, [r7, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d80:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <vTaskPlaceOnEventList+0x48>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3318      	adds	r3, #24
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7fe fe70 	bl	8001a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d8e:	2101      	movs	r1, #1
 8002d90:	6838      	ldr	r0, [r7, #0]
 8002d92:	f000 fa81 	bl	8003298 <prvAddCurrentTaskToDelayedList>
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000740 	.word	0x20000740

08002da4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	617b      	str	r3, [r7, #20]
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	e7fd      	b.n	8002dca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dce:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <vTaskPlaceOnEventListRestricted+0x54>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3318      	adds	r3, #24
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7fe fe25 	bl	8001a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	68b8      	ldr	r0, [r7, #8]
 8002dec:	f000 fa54 	bl	8003298 <prvAddCurrentTaskToDelayedList>
	}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000740 	.word	0x20000740

08002dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	60fb      	str	r3, [r7, #12]
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	e7fd      	b.n	8002e26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	3318      	adds	r3, #24
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fe56 	bl	8001ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <xTaskRemoveFromEventList+0xb0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11d      	bne.n	8002e78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fe4d 	bl	8001ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e4a:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <xTaskRemoveFromEventList+0xb4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d903      	bls.n	8002e5a <xTaskRemoveFromEventList+0x5e>
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	4a16      	ldr	r2, [pc, #88]	@ (8002eb0 <xTaskRemoveFromEventList+0xb4>)
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4a13      	ldr	r2, [pc, #76]	@ (8002eb4 <xTaskRemoveFromEventList+0xb8>)
 8002e68:	441a      	add	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7fe fdd8 	bl	8001a26 <vListInsertEnd>
 8002e76:	e005      	b.n	8002e84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	3318      	adds	r3, #24
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	480e      	ldr	r0, [pc, #56]	@ (8002eb8 <xTaskRemoveFromEventList+0xbc>)
 8002e80:	f7fe fdd1 	bl	8001a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e88:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <xTaskRemoveFromEventList+0xc0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d905      	bls.n	8002e9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <xTaskRemoveFromEventList+0xc4>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e001      	b.n	8002ea2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002ea2:	697b      	ldr	r3, [r7, #20]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000c3c 	.word	0x20000c3c
 8002eb0:	20000c1c 	.word	0x20000c1c
 8002eb4:	20000744 	.word	0x20000744
 8002eb8:	20000bd4 	.word	0x20000bd4
 8002ebc:	20000740 	.word	0x20000740
 8002ec0:	20000c28 	.word	0x20000c28

08002ec4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <vTaskInternalSetTimeOutState+0x24>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <vTaskInternalSetTimeOutState+0x28>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	605a      	str	r2, [r3, #4]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	20000c2c 	.word	0x20000c2c
 8002eec:	20000c18 	.word	0x20000c18

08002ef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10b      	bne.n	8002f18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	613b      	str	r3, [r7, #16]
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60fb      	str	r3, [r7, #12]
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	e7fd      	b.n	8002f32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002f36:	f000 fe8f 	bl	8003c58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <xTaskCheckForTimeOut+0xc0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d102      	bne.n	8002f5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	e023      	b.n	8002fa2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <xTaskCheckForTimeOut+0xc4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d007      	beq.n	8002f76 <xTaskCheckForTimeOut+0x86>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f70:	2301      	movs	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	e015      	b.n	8002fa2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d20b      	bcs.n	8002f98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff99 	bl	8002ec4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e004      	b.n	8002fa2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002fa2:	f000 fe8b 	bl	8003cbc <vPortExitCritical>

	return xReturn;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000c18 	.word	0x20000c18
 8002fb4:	20000c2c 	.word	0x20000c2c

08002fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <vTaskMissedYield+0x14>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	20000c28 	.word	0x20000c28

08002fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002fd8:	f000 f852 	bl	8003080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <prvIdleTask+0x28>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d9f9      	bls.n	8002fd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <prvIdleTask+0x2c>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ff4:	e7f0      	b.n	8002fd8 <prvIdleTask+0x8>
 8002ff6:	bf00      	nop
 8002ff8:	20000744 	.word	0x20000744
 8002ffc:	e000ed04 	.word	0xe000ed04

08003000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	e00c      	b.n	8003026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <prvInitialiseTaskLists+0x60>)
 8003018:	4413      	add	r3, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fcd6 	bl	80019cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3301      	adds	r3, #1
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b37      	cmp	r3, #55	@ 0x37
 800302a:	d9ef      	bls.n	800300c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800302c:	480d      	ldr	r0, [pc, #52]	@ (8003064 <prvInitialiseTaskLists+0x64>)
 800302e:	f7fe fccd 	bl	80019cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003032:	480d      	ldr	r0, [pc, #52]	@ (8003068 <prvInitialiseTaskLists+0x68>)
 8003034:	f7fe fcca 	bl	80019cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003038:	480c      	ldr	r0, [pc, #48]	@ (800306c <prvInitialiseTaskLists+0x6c>)
 800303a:	f7fe fcc7 	bl	80019cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800303e:	480c      	ldr	r0, [pc, #48]	@ (8003070 <prvInitialiseTaskLists+0x70>)
 8003040:	f7fe fcc4 	bl	80019cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003044:	480b      	ldr	r0, [pc, #44]	@ (8003074 <prvInitialiseTaskLists+0x74>)
 8003046:	f7fe fcc1 	bl	80019cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800304a:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <prvInitialiseTaskLists+0x78>)
 800304c:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <prvInitialiseTaskLists+0x64>)
 800304e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003050:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <prvInitialiseTaskLists+0x7c>)
 8003052:	4a05      	ldr	r2, [pc, #20]	@ (8003068 <prvInitialiseTaskLists+0x68>)
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000744 	.word	0x20000744
 8003064:	20000ba4 	.word	0x20000ba4
 8003068:	20000bb8 	.word	0x20000bb8
 800306c:	20000bd4 	.word	0x20000bd4
 8003070:	20000be8 	.word	0x20000be8
 8003074:	20000c00 	.word	0x20000c00
 8003078:	20000bcc 	.word	0x20000bcc
 800307c:	20000bd0 	.word	0x20000bd0

08003080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003086:	e019      	b.n	80030bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003088:	f000 fde6 	bl	8003c58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308c:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <prvCheckTasksWaitingTermination+0x50>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fd21 	bl	8001ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800309e:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <prvCheckTasksWaitingTermination+0x54>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	4a0b      	ldr	r2, [pc, #44]	@ (80030d4 <prvCheckTasksWaitingTermination+0x54>)
 80030a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <prvCheckTasksWaitingTermination+0x58>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <prvCheckTasksWaitingTermination+0x58>)
 80030b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80030b2:	f000 fe03 	bl	8003cbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f810 	bl	80030dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030bc:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <prvCheckTasksWaitingTermination+0x58>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e1      	bne.n	8003088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000be8 	.word	0x20000be8
 80030d4:	20000c14 	.word	0x20000c14
 80030d8:	20000bfc 	.word	0x20000bfc

080030dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 ffa0 	bl	8004038 <vPortFree>
				vPortFree( pxTCB );
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 ff9d 	bl	8004038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030fe:	e019      	b.n	8003134 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003106:	2b01      	cmp	r3, #1
 8003108:	d103      	bne.n	8003112 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 ff94 	bl	8004038 <vPortFree>
	}
 8003110:	e010      	b.n	8003134 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003118:	2b02      	cmp	r3, #2
 800311a:	d00b      	beq.n	8003134 <prvDeleteTCB+0x58>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60fb      	str	r3, [r7, #12]
}
 800312e:	bf00      	nop
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <prvDeleteTCB+0x54>
	}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003142:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <prvResetNextTaskUnblockTime+0x38>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800314c:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <prvResetNextTaskUnblockTime+0x3c>)
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003154:	e008      	b.n	8003168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003156:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <prvResetNextTaskUnblockTime+0x38>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a04      	ldr	r2, [pc, #16]	@ (8003178 <prvResetNextTaskUnblockTime+0x3c>)
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	20000bcc 	.word	0x20000bcc
 8003178:	20000c34 	.word	0x20000c34

0800317c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003182:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <xTaskGetSchedulerState+0x34>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800318a:	2301      	movs	r3, #1
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	e008      	b.n	80031a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003190:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <xTaskGetSchedulerState+0x38>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003198:	2302      	movs	r3, #2
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	e001      	b.n	80031a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80031a2:	687b      	ldr	r3, [r7, #4]
	}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	20000c20 	.word	0x20000c20
 80031b4:	20000c3c 	.word	0x20000c3c

080031b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d058      	beq.n	8003280 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80031ce:	4b2f      	ldr	r3, [pc, #188]	@ (800328c <xTaskPriorityDisinherit+0xd4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d00b      	beq.n	80031f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	60fb      	str	r3, [r7, #12]
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	60bb      	str	r3, [r7, #8]
}
 800320a:	bf00      	nop
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003214:	1e5a      	subs	r2, r3, #1
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003222:	429a      	cmp	r2, r3
 8003224:	d02c      	beq.n	8003280 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322a:	2b00      	cmp	r3, #0
 800322c:	d128      	bne.n	8003280 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	3304      	adds	r3, #4
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fc54 	bl	8001ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003250:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <xTaskPriorityDisinherit+0xd8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d903      	bls.n	8003260 <xTaskPriorityDisinherit+0xa8>
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325c:	4a0c      	ldr	r2, [pc, #48]	@ (8003290 <xTaskPriorityDisinherit+0xd8>)
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <xTaskPriorityDisinherit+0xdc>)
 800326e:	441a      	add	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f7fe fbd5 	bl	8001a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800327c:	2301      	movs	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003280:	697b      	ldr	r3, [r7, #20]
	}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000740 	.word	0x20000740
 8003290:	20000c1c 	.word	0x20000c1c
 8003294:	20000744 	.word	0x20000744

08003298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032a2:	4b21      	ldr	r3, [pc, #132]	@ (8003328 <prvAddCurrentTaskToDelayedList+0x90>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032a8:	4b20      	ldr	r3, [pc, #128]	@ (800332c <prvAddCurrentTaskToDelayedList+0x94>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fc16 	bl	8001ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ba:	d10a      	bne.n	80032d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032c2:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <prvAddCurrentTaskToDelayedList+0x94>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4819      	ldr	r0, [pc, #100]	@ (8003330 <prvAddCurrentTaskToDelayedList+0x98>)
 80032cc:	f7fe fbab 	bl	8001a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032d0:	e026      	b.n	8003320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032da:	4b14      	ldr	r3, [pc, #80]	@ (800332c <prvAddCurrentTaskToDelayedList+0x94>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d209      	bcs.n	80032fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032ea:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <prvAddCurrentTaskToDelayedList+0x9c>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <prvAddCurrentTaskToDelayedList+0x94>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f7fe fbb9 	bl	8001a6e <vListInsert>
}
 80032fc:	e010      	b.n	8003320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <prvAddCurrentTaskToDelayedList+0x94>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7fe fbaf 	bl	8001a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003310:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	429a      	cmp	r2, r3
 8003318:	d202      	bcs.n	8003320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800331a:	4a08      	ldr	r2, [pc, #32]	@ (800333c <prvAddCurrentTaskToDelayedList+0xa4>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000c18 	.word	0x20000c18
 800332c:	20000740 	.word	0x20000740
 8003330:	20000c00 	.word	0x20000c00
 8003334:	20000bd0 	.word	0x20000bd0
 8003338:	20000bcc 	.word	0x20000bcc
 800333c:	20000c34 	.word	0x20000c34

08003340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800334a:	f000 fb13 	bl	8003974 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800334e:	4b1d      	ldr	r3, [pc, #116]	@ (80033c4 <xTimerCreateTimerTask+0x84>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d021      	beq.n	800339a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800335e:	1d3a      	adds	r2, r7, #4
 8003360:	f107 0108 	add.w	r1, r7, #8
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fb15 	bl	8001998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	9202      	str	r2, [sp, #8]
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	2302      	movs	r3, #2
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2300      	movs	r3, #0
 800337e:	460a      	mov	r2, r1
 8003380:	4911      	ldr	r1, [pc, #68]	@ (80033c8 <xTimerCreateTimerTask+0x88>)
 8003382:	4812      	ldr	r0, [pc, #72]	@ (80033cc <xTimerCreateTimerTask+0x8c>)
 8003384:	f7ff f8d0 	bl	8002528 <xTaskCreateStatic>
 8003388:	4603      	mov	r3, r0
 800338a:	4a11      	ldr	r2, [pc, #68]	@ (80033d0 <xTimerCreateTimerTask+0x90>)
 800338c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800338e:	4b10      	ldr	r3, [pc, #64]	@ (80033d0 <xTimerCreateTimerTask+0x90>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003396:	2301      	movs	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	613b      	str	r3, [r7, #16]
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	e7fd      	b.n	80033b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80033b8:	697b      	ldr	r3, [r7, #20]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000c70 	.word	0x20000c70
 80033c8:	08004334 	.word	0x08004334
 80033cc:	0800350d 	.word	0x0800350d
 80033d0:	20000c74 	.word	0x20000c74

080033d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <xTimerGenericCommand+0x30>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	623b      	str	r3, [r7, #32]
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <xTimerGenericCommand+0x98>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d02a      	beq.n	8003462 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b05      	cmp	r3, #5
 800341c:	dc18      	bgt.n	8003450 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800341e:	f7ff fead 	bl	800317c <xTaskGetSchedulerState>
 8003422:	4603      	mov	r3, r0
 8003424:	2b02      	cmp	r3, #2
 8003426:	d109      	bne.n	800343c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003428:	4b10      	ldr	r3, [pc, #64]	@ (800346c <xTimerGenericCommand+0x98>)
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	f107 0110 	add.w	r1, r7, #16
 8003430:	2300      	movs	r3, #0
 8003432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003434:	f7fe fc88 	bl	8001d48 <xQueueGenericSend>
 8003438:	6278      	str	r0, [r7, #36]	@ 0x24
 800343a:	e012      	b.n	8003462 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <xTimerGenericCommand+0x98>)
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	f107 0110 	add.w	r1, r7, #16
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	f7fe fc7e 	bl	8001d48 <xQueueGenericSend>
 800344c:	6278      	str	r0, [r7, #36]	@ 0x24
 800344e:	e008      	b.n	8003462 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003450:	4b06      	ldr	r3, [pc, #24]	@ (800346c <xTimerGenericCommand+0x98>)
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	f107 0110 	add.w	r1, r7, #16
 8003458:	2300      	movs	r3, #0
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	f7fe fd76 	bl	8001f4c <xQueueGenericSendFromISR>
 8003460:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003464:	4618      	mov	r0, r3
 8003466:	3728      	adds	r7, #40	@ 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000c70 	.word	0x20000c70

08003470 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af02      	add	r7, sp, #8
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800347a:	4b23      	ldr	r3, [pc, #140]	@ (8003508 <prvProcessExpiredTimer+0x98>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3304      	adds	r3, #4
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fb29 	bl	8001ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d023      	beq.n	80034e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	18d1      	adds	r1, r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6978      	ldr	r0, [r7, #20]
 80034aa:	f000 f8d5 	bl	8003658 <prvInsertTimerInActiveList>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	2300      	movs	r3, #0
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	2100      	movs	r1, #0
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff88 	bl	80033d4 <xTimerGenericCommand>
 80034c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d114      	bne.n	80034f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	60fb      	str	r3, [r7, #12]
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	6978      	ldr	r0, [r7, #20]
 80034fc:	4798      	blx	r3
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000c68 	.word	0x20000c68

0800350c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003514:	f107 0308 	add.w	r3, r7, #8
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f859 	bl	80035d0 <prvGetNextExpireTime>
 800351e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4619      	mov	r1, r3
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f805 	bl	8003534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800352a:	f000 f8d7 	bl	80036dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800352e:	bf00      	nop
 8003530:	e7f0      	b.n	8003514 <prvTimerTask+0x8>
	...

08003534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800353e:	f7ff fa37 	bl	80029b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f866 	bl	8003618 <prvSampleTimeNow>
 800354c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d130      	bne.n	80035b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <prvProcessTimerOrBlockTask+0x3c>
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	429a      	cmp	r2, r3
 8003560:	d806      	bhi.n	8003570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003562:	f7ff fa33 	bl	80029cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003566:	68f9      	ldr	r1, [r7, #12]
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff81 	bl	8003470 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800356e:	e024      	b.n	80035ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003576:	4b13      	ldr	r3, [pc, #76]	@ (80035c4 <prvProcessTimerOrBlockTask+0x90>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <prvProcessTimerOrBlockTask+0x50>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <prvProcessTimerOrBlockTask+0x52>
 8003584:	2300      	movs	r3, #0
 8003586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003588:	4b0f      	ldr	r3, [pc, #60]	@ (80035c8 <prvProcessTimerOrBlockTask+0x94>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	f7fe ff93 	bl	80024c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800359a:	f7ff fa17 	bl	80029cc <xTaskResumeAll>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80035a4:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <prvProcessTimerOrBlockTask+0x98>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
}
 80035b4:	e001      	b.n	80035ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80035b6:	f7ff fa09 	bl	80029cc <xTaskResumeAll>
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000c6c 	.word	0x20000c6c
 80035c8:	20000c70 	.word	0x20000c70
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80035d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <prvGetNextExpireTime+0x44>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <prvGetNextExpireTime+0x16>
 80035e2:	2201      	movs	r2, #1
 80035e4:	e000      	b.n	80035e8 <prvGetNextExpireTime+0x18>
 80035e6:	2200      	movs	r2, #0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035f4:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <prvGetNextExpireTime+0x44>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e001      	b.n	8003604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000c68 	.word	0x20000c68

08003618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003620:	f7ff fa72 	bl	8002b08 <xTaskGetTickCount>
 8003624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003626:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <prvSampleTimeNow+0x3c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	429a      	cmp	r2, r3
 800362e:	d205      	bcs.n	800363c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003630:	f000 f93a 	bl	80038a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e002      	b.n	8003642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003642:	4a04      	ldr	r2, [pc, #16]	@ (8003654 <prvSampleTimeNow+0x3c>)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003648:	68fb      	ldr	r3, [r7, #12]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000c78 	.word	0x20000c78

08003658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d812      	bhi.n	80036a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	1ad2      	subs	r2, r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	429a      	cmp	r2, r3
 800368a:	d302      	bcc.n	8003692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e01b      	b.n	80036ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003692:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <prvInsertTimerInActiveList+0x7c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7fe f9e6 	bl	8001a6e <vListInsert>
 80036a2:	e012      	b.n	80036ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d206      	bcs.n	80036ba <prvInsertTimerInActiveList+0x62>
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	e007      	b.n	80036ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036ba:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <prvInsertTimerInActiveList+0x80>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3304      	adds	r3, #4
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7fe f9d2 	bl	8001a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80036ca:	697b      	ldr	r3, [r7, #20]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000c6c 	.word	0x20000c6c
 80036d8:	20000c68 	.word	0x20000c68

080036dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	@ 0x38
 80036e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036e2:	e0ce      	b.n	8003882 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da19      	bge.n	800371e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	3304      	adds	r3, #4
 80036ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	61fb      	str	r3, [r7, #28]
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	e7fd      	b.n	800370a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003714:	6850      	ldr	r0, [r2, #4]
 8003716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003718:	6892      	ldr	r2, [r2, #8]
 800371a:	4611      	mov	r1, r2
 800371c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f2c0 80ae 	blt.w	8003882 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800372a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003734:	3304      	adds	r3, #4
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe f9d2 	bl	8001ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800373c:	463b      	mov	r3, r7
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff6a 	bl	8003618 <prvSampleTimeNow>
 8003744:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b09      	cmp	r3, #9
 800374a:	f200 8097 	bhi.w	800387c <prvProcessReceivedCommands+0x1a0>
 800374e:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <prvProcessReceivedCommands+0x78>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	0800377d 	.word	0x0800377d
 8003758:	0800377d 	.word	0x0800377d
 800375c:	0800377d 	.word	0x0800377d
 8003760:	080037f3 	.word	0x080037f3
 8003764:	08003807 	.word	0x08003807
 8003768:	08003853 	.word	0x08003853
 800376c:	0800377d 	.word	0x0800377d
 8003770:	0800377d 	.word	0x0800377d
 8003774:	080037f3 	.word	0x080037f3
 8003778:	08003807 	.word	0x08003807
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	b2da      	uxtb	r2, r3
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	18d1      	adds	r1, r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800379c:	f7ff ff5c 	bl	8003658 <prvInsertTimerInActiveList>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d06c      	beq.n	8003880 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d061      	beq.n	8003880 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	441a      	add	r2, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2300      	movs	r3, #0
 80037ca:	2100      	movs	r1, #0
 80037cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037ce:	f7ff fe01 	bl	80033d4 <xTimerGenericCommand>
 80037d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d152      	bne.n	8003880 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	61bb      	str	r3, [r7, #24]
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003804:	e03d      	b.n	8003882 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2da      	uxtb	r2, r3
 8003812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003814:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	617b      	str	r3, [r7, #20]
}
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	e7fd      	b.n	800383a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	18d1      	adds	r1, r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800384c:	f7ff ff04 	bl	8003658 <prvInsertTimerInActiveList>
					break;
 8003850:	e017      	b.n	8003882 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d103      	bne.n	8003868 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003862:	f000 fbe9 	bl	8004038 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003866:	e00c      	b.n	8003882 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800387a:	e002      	b.n	8003882 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800387c:	bf00      	nop
 800387e:	e000      	b.n	8003882 <prvProcessReceivedCommands+0x1a6>
					break;
 8003880:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003882:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <prvProcessReceivedCommands+0x1c8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	1d39      	adds	r1, r7, #4
 8003888:	2200      	movs	r2, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fbfc 	bl	8002088 <xQueueReceive>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	f47f af26 	bne.w	80036e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3730      	adds	r7, #48	@ 0x30
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000c70 	.word	0x20000c70

080038a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038ae:	e049      	b.n	8003944 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038b0:	4b2e      	ldr	r3, [pc, #184]	@ (800396c <prvSwitchTimerLists+0xc4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ba:	4b2c      	ldr	r3, [pc, #176]	@ (800396c <prvSwitchTimerLists+0xc4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe f909 	bl	8001ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02f      	beq.n	8003944 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d90e      	bls.n	8003914 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003902:	4b1a      	ldr	r3, [pc, #104]	@ (800396c <prvSwitchTimerLists+0xc4>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7fe f8ae 	bl	8001a6e <vListInsert>
 8003912:	e017      	b.n	8003944 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2300      	movs	r3, #0
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	2100      	movs	r1, #0
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fd58 	bl	80033d4 <xTimerGenericCommand>
 8003924:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	603b      	str	r3, [r7, #0]
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003944:	4b09      	ldr	r3, [pc, #36]	@ (800396c <prvSwitchTimerLists+0xc4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1b0      	bne.n	80038b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800394e:	4b07      	ldr	r3, [pc, #28]	@ (800396c <prvSwitchTimerLists+0xc4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003954:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <prvSwitchTimerLists+0xc8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a04      	ldr	r2, [pc, #16]	@ (800396c <prvSwitchTimerLists+0xc4>)
 800395a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800395c:	4a04      	ldr	r2, [pc, #16]	@ (8003970 <prvSwitchTimerLists+0xc8>)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6013      	str	r3, [r2, #0]
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000c68 	.word	0x20000c68
 8003970:	20000c6c 	.word	0x20000c6c

08003974 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800397a:	f000 f96d 	bl	8003c58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <prvCheckForValidListAndQueue+0x60>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d120      	bne.n	80039c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003986:	4814      	ldr	r0, [pc, #80]	@ (80039d8 <prvCheckForValidListAndQueue+0x64>)
 8003988:	f7fe f820 	bl	80019cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800398c:	4813      	ldr	r0, [pc, #76]	@ (80039dc <prvCheckForValidListAndQueue+0x68>)
 800398e:	f7fe f81d 	bl	80019cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003992:	4b13      	ldr	r3, [pc, #76]	@ (80039e0 <prvCheckForValidListAndQueue+0x6c>)
 8003994:	4a10      	ldr	r2, [pc, #64]	@ (80039d8 <prvCheckForValidListAndQueue+0x64>)
 8003996:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003998:	4b12      	ldr	r3, [pc, #72]	@ (80039e4 <prvCheckForValidListAndQueue+0x70>)
 800399a:	4a10      	ldr	r2, [pc, #64]	@ (80039dc <prvCheckForValidListAndQueue+0x68>)
 800399c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800399e:	2300      	movs	r3, #0
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <prvCheckForValidListAndQueue+0x74>)
 80039a4:	4a11      	ldr	r2, [pc, #68]	@ (80039ec <prvCheckForValidListAndQueue+0x78>)
 80039a6:	2110      	movs	r1, #16
 80039a8:	200a      	movs	r0, #10
 80039aa:	f7fe f92d 	bl	8001c08 <xQueueGenericCreateStatic>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4a08      	ldr	r2, [pc, #32]	@ (80039d4 <prvCheckForValidListAndQueue+0x60>)
 80039b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80039b4:	4b07      	ldr	r3, [pc, #28]	@ (80039d4 <prvCheckForValidListAndQueue+0x60>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <prvCheckForValidListAndQueue+0x60>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	490b      	ldr	r1, [pc, #44]	@ (80039f0 <prvCheckForValidListAndQueue+0x7c>)
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fd52 	bl	800246c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039c8:	f000 f978 	bl	8003cbc <vPortExitCritical>
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000c70 	.word	0x20000c70
 80039d8:	20000c40 	.word	0x20000c40
 80039dc:	20000c54 	.word	0x20000c54
 80039e0:	20000c68 	.word	0x20000c68
 80039e4:	20000c6c 	.word	0x20000c6c
 80039e8:	20000d1c 	.word	0x20000d1c
 80039ec:	20000c7c 	.word	0x20000c7c
 80039f0:	0800433c 	.word	0x0800433c

080039f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3b04      	subs	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3b04      	subs	r3, #4
 8003a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3b04      	subs	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a24:	4a0c      	ldr	r2, [pc, #48]	@ (8003a58 <pxPortInitialiseStack+0x64>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3b14      	subs	r3, #20
 8003a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3b04      	subs	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f06f 0202 	mvn.w	r2, #2
 8003a42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3b20      	subs	r3, #32
 8003a48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	08003a5d 	.word	0x08003a5d

08003a5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a66:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <prvTaskExitError+0x58>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d00b      	beq.n	8003a88 <prvTaskExitError+0x2c>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	60fb      	str	r3, [r7, #12]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <prvTaskExitError+0x28>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	60bb      	str	r3, [r7, #8]
}
 8003a9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a9c:	bf00      	nop
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0fc      	beq.n	8003a9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000010 	.word	0x20000010
	...

08003ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ac0:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <pxCurrentTCBConst2>)
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	6808      	ldr	r0, [r1, #0]
 8003ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aca:	f380 8809 	msr	PSP, r0
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f380 8811 	msr	BASEPRI, r0
 8003ada:	4770      	bx	lr
 8003adc:	f3af 8000 	nop.w

08003ae0 <pxCurrentTCBConst2>:
 8003ae0:	20000740 	.word	0x20000740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop

08003ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ae8:	4808      	ldr	r0, [pc, #32]	@ (8003b0c <prvPortStartFirstTask+0x24>)
 8003aea:	6800      	ldr	r0, [r0, #0]
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	f380 8808 	msr	MSP, r0
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f380 8814 	msr	CONTROL, r0
 8003afa:	b662      	cpsie	i
 8003afc:	b661      	cpsie	f
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	df00      	svc	0
 8003b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b0a:	bf00      	nop
 8003b0c:	e000ed08 	.word	0xe000ed08

08003b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b16:	4b47      	ldr	r3, [pc, #284]	@ (8003c34 <xPortStartScheduler+0x124>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a47      	ldr	r2, [pc, #284]	@ (8003c38 <xPortStartScheduler+0x128>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10b      	bne.n	8003b38 <xPortStartScheduler+0x28>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	613b      	str	r3, [r7, #16]
}
 8003b32:	bf00      	nop
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b38:	4b3e      	ldr	r3, [pc, #248]	@ (8003c34 <xPortStartScheduler+0x124>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c3c <xPortStartScheduler+0x12c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10b      	bne.n	8003b5a <xPortStartScheduler+0x4a>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	60fb      	str	r3, [r7, #12]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b5a:	4b39      	ldr	r3, [pc, #228]	@ (8003c40 <xPortStartScheduler+0x130>)
 8003b5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	22ff      	movs	r2, #255	@ 0xff
 8003b6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4b31      	ldr	r3, [pc, #196]	@ (8003c44 <xPortStartScheduler+0x134>)
 8003b80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b82:	4b31      	ldr	r3, [pc, #196]	@ (8003c48 <xPortStartScheduler+0x138>)
 8003b84:	2207      	movs	r2, #7
 8003b86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b88:	e009      	b.n	8003b9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c48 <xPortStartScheduler+0x138>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	4a2d      	ldr	r2, [pc, #180]	@ (8003c48 <xPortStartScheduler+0x138>)
 8003b92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba6:	2b80      	cmp	r3, #128	@ 0x80
 8003ba8:	d0ef      	beq.n	8003b8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003baa:	4b27      	ldr	r3, [pc, #156]	@ (8003c48 <xPortStartScheduler+0x138>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1c3 0307 	rsb	r3, r3, #7
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d00b      	beq.n	8003bce <xPortStartScheduler+0xbe>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	60bb      	str	r3, [r7, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	e7fd      	b.n	8003bca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bce:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <xPortStartScheduler+0x138>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c48 <xPortStartScheduler+0x138>)
 8003bd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <xPortStartScheduler+0x138>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003be0:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <xPortStartScheduler+0x138>)
 8003be2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bec:	4b17      	ldr	r3, [pc, #92]	@ (8003c4c <xPortStartScheduler+0x13c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a16      	ldr	r2, [pc, #88]	@ (8003c4c <xPortStartScheduler+0x13c>)
 8003bf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bf8:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <xPortStartScheduler+0x13c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a13      	ldr	r2, [pc, #76]	@ (8003c4c <xPortStartScheduler+0x13c>)
 8003bfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c04:	f000 f8da 	bl	8003dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c08:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <xPortStartScheduler+0x140>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c0e:	f000 f8f9 	bl	8003e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <xPortStartScheduler+0x144>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a0f      	ldr	r2, [pc, #60]	@ (8003c54 <xPortStartScheduler+0x144>)
 8003c18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c1e:	f7ff ff63 	bl	8003ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c22:	f7ff f83b 	bl	8002c9c <vTaskSwitchContext>
	prvTaskExitError();
 8003c26:	f7ff ff19 	bl	8003a5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	e000ed00 	.word	0xe000ed00
 8003c38:	410fc271 	.word	0x410fc271
 8003c3c:	410fc270 	.word	0x410fc270
 8003c40:	e000e400 	.word	0xe000e400
 8003c44:	20000d6c 	.word	0x20000d6c
 8003c48:	20000d70 	.word	0x20000d70
 8003c4c:	e000ed20 	.word	0xe000ed20
 8003c50:	20000010 	.word	0x20000010
 8003c54:	e000ef34 	.word	0xe000ef34

08003c58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	607b      	str	r3, [r7, #4]
}
 8003c70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <vPortEnterCritical+0x5c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3301      	adds	r3, #1
 8003c78:	4a0e      	ldr	r2, [pc, #56]	@ (8003cb4 <vPortEnterCritical+0x5c>)
 8003c7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <vPortEnterCritical+0x5c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d110      	bne.n	8003ca6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c84:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <vPortEnterCritical+0x60>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	603b      	str	r3, [r7, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	e7fd      	b.n	8003ca2 <vPortEnterCritical+0x4a>
	}
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000010 	.word	0x20000010
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cc2:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <vPortExitCritical+0x50>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <vPortExitCritical+0x26>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	607b      	str	r3, [r7, #4]
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	e7fd      	b.n	8003cde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <vPortExitCritical+0x50>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <vPortExitCritical+0x50>)
 8003cea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <vPortExitCritical+0x50>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <vPortExitCritical+0x44>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f383 8811 	msr	BASEPRI, r3
}
 8003cfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	20000010 	.word	0x20000010

08003d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d10:	f3ef 8009 	mrs	r0, PSP
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <pxCurrentTCBConst>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f01e 0f10 	tst.w	lr, #16
 8003d20:	bf08      	it	eq
 8003d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	6010      	str	r0, [r2, #0]
 8003d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d34:	f380 8811 	msr	BASEPRI, r0
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f7fe ffac 	bl	8002c9c <vTaskSwitchContext>
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	f380 8811 	msr	BASEPRI, r0
 8003d4c:	bc09      	pop	{r0, r3}
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	6808      	ldr	r0, [r1, #0]
 8003d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d56:	f01e 0f10 	tst.w	lr, #16
 8003d5a:	bf08      	it	eq
 8003d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d60:	f380 8809 	msr	PSP, r0
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w

08003d70 <pxCurrentTCBConst>:
 8003d70:	20000740 	.word	0x20000740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop

08003d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
}
 8003d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d92:	f7fe fec9 	bl	8002b28 <xTaskIncrementTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <xPortSysTickHandler+0x40>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f383 8811 	msr	BASEPRI, r3
}
 8003dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <vPortSetupTimerInterrupt+0x34>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <vPortSetupTimerInterrupt+0x38>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003df8 <vPortSetupTimerInterrupt+0x3c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <vPortSetupTimerInterrupt+0x40>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <vPortSetupTimerInterrupt+0x44>)
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dde:	4b04      	ldr	r3, [pc, #16]	@ (8003df0 <vPortSetupTimerInterrupt+0x34>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
}
 8003de4:	bf00      	nop
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000e010 	.word	0xe000e010
 8003df4:	e000e018 	.word	0xe000e018
 8003df8:	20000004 	.word	0x20000004
 8003dfc:	51eb851f 	.word	0x51eb851f
 8003e00:	e000e014 	.word	0xe000e014

08003e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003e14 <vPortEnableVFP+0x10>
 8003e08:	6801      	ldr	r1, [r0, #0]
 8003e0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003e0e:	6001      	str	r1, [r0, #0]
 8003e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e12:	bf00      	nop
 8003e14:	e000ed88 	.word	0xe000ed88

08003e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e1e:	f3ef 8305 	mrs	r3, IPSR
 8003e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b0f      	cmp	r3, #15
 8003e28:	d915      	bls.n	8003e56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e2a:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <vPortValidateInterruptPriority+0x74>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e34:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <vPortValidateInterruptPriority+0x78>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	7afa      	ldrb	r2, [r7, #11]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d20b      	bcs.n	8003e56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	e7fd      	b.n	8003e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e56:	4b0f      	ldr	r3, [pc, #60]	@ (8003e94 <vPortValidateInterruptPriority+0x7c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e98 <vPortValidateInterruptPriority+0x80>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d90b      	bls.n	8003e7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	603b      	str	r3, [r7, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <vPortValidateInterruptPriority+0x62>
	}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	e000e3f0 	.word	0xe000e3f0
 8003e90:	20000d6c 	.word	0x20000d6c
 8003e94:	e000ed0c 	.word	0xe000ed0c
 8003e98:	20000d70 	.word	0x20000d70

08003e9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	@ 0x28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ea8:	f7fe fd82 	bl	80029b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003eac:	4b5c      	ldr	r3, [pc, #368]	@ (8004020 <pvPortMalloc+0x184>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003eb4:	f000 f924 	bl	8004100 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8004024 <pvPortMalloc+0x188>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f040 8095 	bne.w	8003ff0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01e      	beq.n	8003f0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003ecc:	2208      	movs	r2, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d015      	beq.n	8003f0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f023 0307 	bic.w	r3, r3, #7
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <pvPortMalloc+0x6e>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	617b      	str	r3, [r7, #20]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d06f      	beq.n	8003ff0 <pvPortMalloc+0x154>
 8003f10:	4b45      	ldr	r3, [pc, #276]	@ (8004028 <pvPortMalloc+0x18c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d86a      	bhi.n	8003ff0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f1a:	4b44      	ldr	r3, [pc, #272]	@ (800402c <pvPortMalloc+0x190>)
 8003f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f1e:	4b43      	ldr	r3, [pc, #268]	@ (800402c <pvPortMalloc+0x190>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f24:	e004      	b.n	8003f30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d903      	bls.n	8003f42 <pvPortMalloc+0xa6>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f1      	bne.n	8003f26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f42:	4b37      	ldr	r3, [pc, #220]	@ (8004020 <pvPortMalloc+0x184>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d051      	beq.n	8003ff0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2208      	movs	r2, #8
 8003f52:	4413      	add	r3, r2
 8003f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	1ad2      	subs	r2, r2, r3
 8003f66:	2308      	movs	r3, #8
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d920      	bls.n	8003fb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00b      	beq.n	8003f98 <pvPortMalloc+0xfc>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	613b      	str	r3, [r7, #16]
}
 8003f92:	bf00      	nop
 8003f94:	bf00      	nop
 8003f96:	e7fd      	b.n	8003f94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	1ad2      	subs	r2, r2, r3
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003faa:	69b8      	ldr	r0, [r7, #24]
 8003fac:	f000 f90a 	bl	80041c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004028 <pvPortMalloc+0x18c>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <pvPortMalloc+0x18c>)
 8003fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004028 <pvPortMalloc+0x18c>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <pvPortMalloc+0x194>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d203      	bcs.n	8003fd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fca:	4b17      	ldr	r3, [pc, #92]	@ (8004028 <pvPortMalloc+0x18c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <pvPortMalloc+0x194>)
 8003fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	4b13      	ldr	r3, [pc, #76]	@ (8004024 <pvPortMalloc+0x188>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003fe6:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <pvPortMalloc+0x198>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	4a11      	ldr	r2, [pc, #68]	@ (8004034 <pvPortMalloc+0x198>)
 8003fee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ff0:	f7fe fcec 	bl	80029cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <pvPortMalloc+0x17a>
	__asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	60fb      	str	r3, [r7, #12]
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	e7fd      	b.n	8004012 <pvPortMalloc+0x176>
	return pvReturn;
 8004016:	69fb      	ldr	r3, [r7, #28]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	@ 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	2000497c 	.word	0x2000497c
 8004024:	20004990 	.word	0x20004990
 8004028:	20004980 	.word	0x20004980
 800402c:	20004974 	.word	0x20004974
 8004030:	20004984 	.word	0x20004984
 8004034:	20004988 	.word	0x20004988

08004038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d04f      	beq.n	80040ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800404a:	2308      	movs	r3, #8
 800404c:	425b      	negs	r3, r3
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4413      	add	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4b25      	ldr	r3, [pc, #148]	@ (80040f4 <vPortFree+0xbc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <vPortFree+0x46>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60fb      	str	r3, [r7, #12]
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <vPortFree+0x66>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60bb      	str	r3, [r7, #8]
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	e7fd      	b.n	800409a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4b14      	ldr	r3, [pc, #80]	@ (80040f4 <vPortFree+0xbc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01e      	beq.n	80040ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11a      	bne.n	80040ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <vPortFree+0xbc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	43db      	mvns	r3, r3
 80040be:	401a      	ands	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040c4:	f7fe fc74 	bl	80029b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	4b0a      	ldr	r3, [pc, #40]	@ (80040f8 <vPortFree+0xc0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4413      	add	r3, r2
 80040d2:	4a09      	ldr	r2, [pc, #36]	@ (80040f8 <vPortFree+0xc0>)
 80040d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040d6:	6938      	ldr	r0, [r7, #16]
 80040d8:	f000 f874 	bl	80041c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040dc:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <vPortFree+0xc4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	4a06      	ldr	r2, [pc, #24]	@ (80040fc <vPortFree+0xc4>)
 80040e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040e6:	f7fe fc71 	bl	80029cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20004990 	.word	0x20004990
 80040f8:	20004980 	.word	0x20004980
 80040fc:	2000498c 	.word	0x2000498c

08004100 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004106:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800410a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800410c:	4b27      	ldr	r3, [pc, #156]	@ (80041ac <prvHeapInit+0xac>)
 800410e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00c      	beq.n	8004134 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3307      	adds	r3, #7
 800411e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <prvHeapInit+0xac>)
 8004130:	4413      	add	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004138:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <prvHeapInit+0xb0>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800413e:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <prvHeapInit+0xb0>)
 8004140:	2200      	movs	r2, #0
 8004142:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	4413      	add	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800414c:	2208      	movs	r2, #8
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a15      	ldr	r2, [pc, #84]	@ (80041b4 <prvHeapInit+0xb4>)
 8004160:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004162:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <prvHeapInit+0xb4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800416a:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <prvHeapInit+0xb4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	1ad2      	subs	r2, r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004180:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <prvHeapInit+0xb4>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <prvHeapInit+0xb8>)
 800418e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a09      	ldr	r2, [pc, #36]	@ (80041bc <prvHeapInit+0xbc>)
 8004196:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <prvHeapInit+0xc0>)
 800419a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800419e:	601a      	str	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	20000d74 	.word	0x20000d74
 80041b0:	20004974 	.word	0x20004974
 80041b4:	2000497c 	.word	0x2000497c
 80041b8:	20004984 	.word	0x20004984
 80041bc:	20004980 	.word	0x20004980
 80041c0:	20004990 	.word	0x20004990

080041c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041cc:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <prvInsertBlockIntoFreeList+0xac>)
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e002      	b.n	80041d8 <prvInsertBlockIntoFreeList+0x14>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d8f7      	bhi.n	80041d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d108      	bne.n	8004206 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	441a      	add	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	441a      	add	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d118      	bne.n	800424c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <prvInsertBlockIntoFreeList+0xb0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d00d      	beq.n	8004242 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e008      	b.n	8004254 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004242:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <prvInsertBlockIntoFreeList+0xb0>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e003      	b.n	8004254 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d002      	beq.n	8004262 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20004974 	.word	0x20004974
 8004274:	2000497c 	.word	0x2000497c

08004278 <memset>:
 8004278:	4402      	add	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4d0d      	ldr	r5, [pc, #52]	@ (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	@ (80042c4 <__libc_init_array+0x3c>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2600      	movs	r6, #0
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4d0b      	ldr	r5, [pc, #44]	@ (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	@ (80042cc <__libc_init_array+0x44>)
 800429c:	f000 f826 	bl	80042ec <_init>
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2600      	movs	r6, #0
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	080043c8 	.word	0x080043c8
 80042c4:	080043c8 	.word	0x080043c8
 80042c8:	080043c8 	.word	0x080043c8
 80042cc:	080043cc 	.word	0x080043cc

080042d0 <memcpy>:
 80042d0:	440a      	add	r2, r1
 80042d2:	4291      	cmp	r1, r2
 80042d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042d8:	d100      	bne.n	80042dc <memcpy+0xc>
 80042da:	4770      	bx	lr
 80042dc:	b510      	push	{r4, lr}
 80042de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e6:	4291      	cmp	r1, r2
 80042e8:	d1f9      	bne.n	80042de <memcpy+0xe>
 80042ea:	bd10      	pop	{r4, pc}

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
